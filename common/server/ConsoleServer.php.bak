<?php

require_once __DIR__."/../model/QueueService.php";
require_once __DIR__."/../command/NoticePushCommand.php";

ini_set('memory_limit','2G');

function sortRankByStar($p1,$p2){
    if($p1['max_floors'] != $p2['max_floors']){
        return $p1['max_floors'] < $p2['max_floors'];
    }else{
        return $p1['max_stars'] < $p2['max_stars'];
    }
}
function array2code($key,$value,$indent){
    $prefix = '';
    for($i=0;$i<$indent;$i++){
        $prefix .= '    ';
    }
    $suffix = $indent?',':';';
    $str = '';
    if($key!==null){
        //$key = addslashes($key);
        $key=str_replace("'","\'",$key);
        $str .= $prefix."'$key'=>";
    }
    if(is_array($value)){
        $str .= "array(\n";
        foreach($value as $k=>$v){
            $str .= array2code($k,$v,$indent+1);
        }
        $str .= $prefix.")$suffix\n";
    }else{
        if(is_numeric($value)){
            $str .= "$value$suffix\n";
        }else{
            //$value = addslashes($value);
            $value=str_replace("'","\'",$value);
            $str .= "'$value'$suffix\n";
        }
    }
    return $str;
}

class ConsoleServer{
    public $_params = null;
        public function init_param(){
        global $argc;
        global $argv;
        $this->_params = array();
        for($i=1;$i<$argc;$i++){
            foreach(explode(",",$argv[$i]) as $v){
                list($key,$value) = explode('=',$v);
                $this->_params[$key] = $value;
            }
        }
    }
    public function get_param($name){
        if(is_null($this->_params)){
            $this->init_param();
        }
        return $this->_params[$name];
    }
    public function run(){
        $action = $this->get_param('action');
        $method_name = 'action_'.$action;
        if(method_exists($this,$method_name)){
            $this->$method_name();
        }else{
            echo "action[$action] not defined in ConsoleServer\n";
            exit(1);
        }
    }
    public function action_notice_queue(){
        $warning_threshold = 256;
        $max_running_time = 3600;

        $qs = new QueueService('notice_queue');
        $qsconfig = DbConfig::getDbConfig('queue');
        $qs->connect($qsconfig['host'],$qsconfig['port']);
        if($qs->connected){
            $start_t = time();
            $process_id = getmypid();
            glog::info("[$process_id] worker started",'queue');
            while(1){
                try{
                    $now = date('Y-m-d H:i:s');
                    $queue_len = $qs->length();
                    if($queue_len > $warning_threshold){
                        glog::fatalerror(__METHOD__.", 队列中待处理的任务过多[{$queue_len}], 请考虑增加worker数量");
                    }
                    while($qs->length()){
                        $info = $qs->pop();
                        $uid = $info["uid"];
                        $sec = $info["sec"];
                        $msg = $info["msg"];
                        $action = $info['action'];
                        glog::info("[$now][$process_id] worker handle [$action][$sec][$uid]",'queue');
                        if($action == 'addRemoteNotification'){
                            NoticePushCommand::push($uid,$sec,$msg);
                        }else if($action=='mijicanzhang_rm' || $action=='mijicanzhang_add'){
                            NoticePushCommand::handleCanZhangMsg($uid, $sec, $msg, $action);
                        }else if($action=="update_cache"){
                            $fields = $info['fields'];
                            model_CacheUtil::updateCache($uid,$sec,$fields);
                        }else if($action=="send_chenghao"){
                            //世界boss
                            //发送称号
                            $type = $info['type'];
                            $tag = $info['tag'];
                            $level = $info['level'];
                            NoticePushCommand::handleChenghao($uid,$sec,$type,$tag,$level);
                        }else{
                        }
                    }
                    sleep(1);
                    if(time()-$start_t > $max_running_time){
                        glog::info("[$now][$process_id] worker exit",'queue');
                        exit(0);
                    }
                }catch(Exception $ex){
                    glog::info("[$now][$process_id] exception: ".$ex->getMessage(). "\n".$ex->getTraceAsString(),'queue');
                    $qs->connect($qsconfig['host'],$qsconfig['port']);
                    if($qs->connected){
                        glog::info("[$now][$process_id] redis re-connected",'queue');
                    }else{
                        glog::info("[$now][$process_id] redis connection lost",'queue');
                        break;
                    }
                }
            }
        }
    }
    public function action_lunjian(){
        $section = $this->get_param('sec');
        if(empty($section)){
            die("需要分区参数sec");
        }
        model_PVPUtil::createLunjian($section);
        /*
        $redis = DbConfig::getRedis('lunjian');
        $redis->flushall();
        $lunjian_configs = PL_Config_Numeric::get('lunjian');
        foreach($lunjian_configs as $lunjian_tag =>$lunjian_config){
            model_PVPUtil::createLunjian($lunjian_tag);
        }
         */
    }

	public function action_check_lunjian_rank(){
        $section = $this->get_param('sec');
		if(empty($section)){
			$section_list = array_keys(getApp()->getSectionConfig());
		}else{
			$section_list = (array)$section;
		}
		if(empty($section_list)){
			throw new Exception('section error');
			return;
		}
        $redis = DbConfig::getRedis('lunjian');
		$now = time();
		$renwutag = '500105';

		foreach($section_list as $section){
			echo "******* section = $section *******\n";
			$rank_key = model_PVPUtil::getLunjianListID($section);
			$rank_max_key = model_PVPUtil::getLunjianMaxUserID($section);
			$total = $redis->hget($rank_max_key, 'max');
            $fill_id = $redis->hget($rank_max_key, 'npc_max');
            echo "fill id = $fill_id\n";
			$rank_data = $redis->hgetall($rank_key); // rank->uid
			ksort($rank_data);
			//print_r($rank_data);
			echo "total rank people = ". count($rank_data). "\n";
			echo "max rank count = $total\n";

			foreach($rank_data as $rank => $uid){
				$user_info_key = model_PVPUtil::getLunjianUserID($section, $uid);
				$udata = $redis->hgetall($user_info_key);
				$exist[] = $rank;
				if((int)$udata['rank'] !== $rank){
					echo "uid : $uid => rank[in list] = $rank, rank[in user info] = {$udata['rank']}\n";
					
					if(!is_numeric($uid)){
						$uid_new = "npc.".$fill_id++;
						echo "uid new = $uid_new\n";
						$redis->hset($rank_key, $rank, $uid_new);
						$uid_new_renwuname = model_Util::randomName();
						$uid_new_info = array(
							'rank'=>$rank,
							'rank_t'=>$now,
							'name'=>$uid_new_renwuname,
							'renwutag'=>$renwutag,
						);
						echo "info new = \n";
						print_r($uid_new_info);

						$new_user_info_key = model_PVPUtil::getLunjianUserID($section, $uid_new);
						echo "new user info key = $new_user_info_key\n";
						$redis->hmset($new_user_info_key, $uid_new_info);
					}
				}
				if(empty($udata)){
					if(!is_numeric($uid)){
						echo "****** fill user info: ******\n";
						$renwuname = model_Util::randomName();
						$info = array(
							'rank'=>$rank,
							'rank_t'=>$now,
							'name'=>$renwuname,
							'renwutag'=>$renwutag,
						);
						echo "renwutag = $renwutag, info = \n";
						print_r($info);
						echo "*****************************\n";
						$redis->hmset($user_info_key, $info);
						continue;
					}
				}
				if(!is_numeric($uid)){
					$npc[] = $uid;
					if(empty($udata['renwutag']) || empty($udata['name'])){
						echo "======émpty info=======\n";
						echo "uid = $uid, info = \n";
						print_r($udata);
						$renwuname = model_Util::randomName();
						$redis->hset($user_info_key, 'renwutag', $renwutag);
						$redis->hset($user_info_key, 'name', $renwuname);
					}
				}
				if(is_numeric($uid))
					$real++;
			}
			$redis->hset($rank_max_key, 'npc_max', $fill_id);

			$keys = array_keys($rank_data);
			//print_r($keys);
			$all = range(1, $total);

			$diff = array_diff($all, $keys);
			echo "missing ranks\n";
			print_r($diff);
			echo "miss ".count($diff)." rank\n";
			echo "real people = $real\n";
		}
    }   


	public function action_fill_rank_with_npcs(){
        $section = $this->get_param('sec');
		if(empty($section)){
			$section_list = array_keys(getApp()->getSectionConfig());
		}else{
			$section_list = (array)$section;
		}
		if(empty($section_list)){
			throw new Exception('section error');
			return;
		}
        $redis = DbConfig::getRedis('lunjian');
		$now = time();
		$renwutag = '500105';
		foreach($section_list as $section){
			echo "******* section = $section *******\n";
			$rank_key = model_PVPUtil::getLunjianListID($section);
			$rank_max_key = model_PVPUtil::getLunjianMaxUserID($section);
			$total = $redis->hget($rank_max_key, 'max');
			$rank_data = $redis->hgetall($rank_key); // rank->uid
			ksort($rank_data);
			$keys = array_keys($rank_data);
			$all = range(1, $total);
			$diff = array_diff($all, $keys);

			$fill_id = $redis->hget($rank_max_key, 'npc_max');
			if(!$fill_id){
				$fill_id = $total;
			}

			print_r($diff);
			foreach($diff as $rank){
				$npcid = "npc.".$fill_id++;
				$renwuname = model_Util::randomName();
				$info = array(
					'rank'=>$rank,
					'rank_t'=>$now,
					'name'=>$renwuname,
					'renwutag'=>$renwutag,
				);
				echo "npcid = $npcid\n";
				print_r($info);
				$rank_user_key = model_PVPUtil::getLunjianUserID($section, $npcid);
				echo "rank_user_key = $rank_user_key\n";
				$redis->multi();
				$redis->hset($rank_key, $rank, $npcid);
				$redis->hmset($rank_user_key, $info);
				$redis->exec();
			}
            echo "fill id = $fill_id";
			$redis->hset($rank_max_key, 'npc_max', $fill_id);
		}

    }

	public function action_check_npc_max_id(){
		echo "******** date = ". date('Y-m-d H:i:s', time())." ********\n";
        $section = $this->get_param('sec');
		if(empty($section)){
			$section_list = array_keys(getApp()->getSectionConfig());
		}else{
			$section_list = (array)$section;
		}
		if(empty($section_list)){
			throw new Exception('section error');
			return;
		}
		$now = getApp()->now;
        $redis = DbConfig::getRedis('lunjian');
		foreach($section_list as $section){
			$max_npc_id = 0;
			$rank_key = model_PVPUtil::getLunjianListID($section);
			$users = $redis->hgetall($rank_key);
			$rank_max_key = model_PVPUtil::getLunjianMaxUserID($section);
			foreach($users as $rank=>$uid){
				if(!is_numeric($uid)){
					$uid_parts = explode('.', $uid);
					$npc_id = $uid_parts[1];
					$max_npc_id = max($npc_id, $max_npc_id);
				}
			}
			$redis->hset($rank_max_key, 'npc_max', $max_npc_id+1);
		}
	}

	public function action_init_world_boss(){
        $section = $this->get_param('sec');

        $specify_date = $this->get_param('date');//指定日期，格式：20121030，代表2012年十月30号

		if(empty($section)){
			$section_list = array_keys(getApp()->getSectionConfig());
		}else{
			$section_list = (array)$section;
		}
		if(empty($section_list)){
			throw new Exception('section error');
			return;
		}
		$now = getApp()->now;
        $redis = DbConfig::getRedis('worldboss');
		$redis_set = DbConfig::getRedis('cache');
		$world_boss_conf =  PL_Config_Numeric::get('worldboss');
		if(empty($specify_date)){
			$today = strtotime(date('Ymd', strtotime("today")));
			$yesterday = date('md', $today - 24 * 60 * 60);
		}else{
			$today = strtotime($specify_date);
			$yesterday = date('md', $today - 24 * 60 * 60);
		}
		echo "init day = $today, yesterday = $yesterday\n";

		$config['worldboss_levelup_live_time'] = PL_Config_Numeric::get('setting', 'worldboss_levelup_live_time');
		$config['worldboss_hp_increase_live_time'] = PL_Config_Numeric::get('setting', 'worldboss_hp_increase_live_time'); 
		$config['worldboss_hp_decrease_live_time'] = PL_Config_Numeric::get('setting', 'worldboss_hp_decrease_live_time'); 
		$config['worldboss_hp_max_ratio'] = PL_Config_Numeric::get('setting', 'worldboss_hp_max_ratio'); 
		$config['worldboss_hp_min_ratio'] = PL_Config_Numeric::get('setting', 'worldboss_hp_min_ratio'); 
		$config['worldboss_init_hp_args'] = PL_Config_Numeric::get('setting', 'worldboss_init_hp_args');

		$init_args = $config['worldboss_init_hp_args'];

		foreach($section_list as $section){
			foreach($world_boss_conf as $tag => $conf){
				$activityConfig = getApp()->getactivityconfig("act_worldboss_$tag");
				if($activityConfig){
					echo "\n=======< active_conf >=========\n";
					print_r($activityConfig);
					if($now < $activityConfig['start_t'] || $now > $activityConfig['end_t']){
						echo "[$tag] 不在活动时间内\n";
						continue;
					}
				}

				$boss_today_key  = model_Util::getBossKey($tag, $section, date('md', $today));

				$boss_yesterday_rank_key = "worldboss_rank_{$tag}_{$section}_{$yesterday}"; 
				$is_attacked = $redis->zcard($boss_yesterday_rank_key);

				echo "boss_today_key = $boss_today_key\n boss_yesterday_rank_key = $boss_yesterday_rank_key\n is_attacked = $is_attacked\n";

				//活动时间
				$start_time = $conf['start_time'] + $today;
				$end_time   = $start_time + $conf['last_time'];

				//根据昨日情况计算今日的Boss属性
				$boss_yesterday_key  = model_Util::getBossKey($tag, $section, $yesterday);
				$boss_yesterday_info = $redis->hgetall($boss_yesterday_key);

				if(empty($boss_yesterday_info) || $boss_yesterday_info['boss_hp_max'] <= 0){ //第一次初始化
					echo "sec = $section, tag = $tag, first init.\n";
					$boss_level  = $conf['default_level'];
					$section_user_count = $redis_set->scard("total_user_count_device_{$section}");

					if($section_user_count < 50){
						$boss_hp_max = $conf['default_hp'];
					}else{
						$boss_hp_max = $section_user_count * ($init_args[0]/100000 * $init_args[1]/100000 * $init_args[2] * $init_args[3] 
							+ $init_args[4]/100000 * $init_args[5]/100000 * $init_args[6] * $init_args[7]);
					}
					echo "max hp = $boss_hp_max\n";
				}else{
					$prev_level   = $boss_yesterday_info['boss_level'];
					$prev_hp_max  = $boss_yesterday_info['boss_hp_max'];
					$prev_kill_time  = $boss_yesterday_info['kill_time'];
					$prev_start_time = $boss_yesterday_info['start_time'];


					if(empty($prev_kill_time)){
						$prev_kill_time = $boss_yesterday_info['end_time'] + 1;//没有杀死boss
					}

					$boss_live_time = $prev_kill_time - $prev_start_time;

					if($boss_live_time < 0){
						return;
					}


					if($boss_live_time < $config['worldboss_hp_increase_live_time'] * 60){
						$boss_hp_max = $prev_hp_max * min($config['worldboss_hp_increase_live_time'] * 60 / $boss_live_time, $config['worldboss_hp_max_ratio']);
					}else if($boss_live_time > $config['worldboss_hp_decrease_live_time'] * 60 && $is_attacked){ //boss存活时间超过规定时间，且被人攻击过，血量会下降。
						$boss_hp_max = $prev_hp_max * max($config['worldboss_hp_decrease_live_time'] * 60 / $boss_live_time, $config['worldboss_hp_min_ratio']);
					}else{
						$boss_hp_max = $prev_hp_max;
					}

					if($boss_live_time <= $config['worldboss_levelup_live_time'] * 60){
						//15分内击杀，boss等级提升
						$boss_level = $prev_level + 1;
					}else{
						$boss_level = $prev_level;
					}
				}
				$boss_hp_max = max($boss_hp_max, 1500000);
				$boss_hp_max = ceil($boss_hp_max);

				$boss_init_info = array(
					'tag'           =>$tag,
					'start_time'    =>$start_time,
					'end_time'      =>$end_time,
					'boss_level'    =>$boss_level,
					'boss_hp_max'   =>$boss_hp_max,
					'boss_hp_left'  =>$boss_hp_max,
				);

				echo "boss_today_key = $boss_today_key, boss_init_info = ";
				print_r($boss_init_info);
				$redis->hmset($boss_today_key, $boss_init_info);
			}

		}

		echo "删除过期数据:\n";
		$del_keys = $redis->keys("wor*");
		for($i=0; $i<=7; $i++){
			$day = date('md', strtotime("$i days ago"));
			$reserve_days[$day] = 1;
		}
		echo "保留的日期:\n";
		print_r($reserve_days);

		$redis->multi(Redis::MULTI);
		foreach($del_keys as $k){
			$sub_date = substr($k, -4);
			if($reserve_days[$sub_date]){
				echo "reserve_key = $k\n";
			}else{
				$redis->del($k);
			}
		}
		$redis->exec();
	}
	//

    public function action_check_cideng(){
        $maxuid = model_LoginUser::maxuid();
        $yesterday = date('ymd',strtotime('-1 days'));
        $today = date('ymd');

        $total_auth_yesterday = 0;
        $total_auth_yesterday_and_login_today = 0;
        for($uid=1;$uid<$maxuid;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ct'=>1));
            $pid = $login_model['pid'];
            $auth_time = $login_model['_ct'];
            $auth_day = date('ymd',$auth_time);
            $player = new model_Player($uid,'s1');
            $login_t = $player->numberGet('base','login_t');
            $login_day = date('ymd',$login_t);
            echo "{$pid}\t\t{$uid}\t$auth_day\t$login_day\n";
            if($auth_day == $yesterday){
                $total_auth_yesterday += 1;
                if($login_day == $today){
                    $total_auth_yesterday_and_login_today += 1;
                }
            }
        }
        $radio = 100 * $total_auth_yesterday_and_login_today / $total_auth_yesterday ;
        print "$total_auth_yesterday_and_login_today / $total_auth_yesterday = $radio\n";
    }
    public function action_canzhang_set(){
        $section_config = getApp()->getSectionConfig();
        $section_ids = array_keys($section_config);
        $maxuid = model_LoginUser::maxuid();
        $redis = DbConfig::getRedis('duomiji');
        foreach($section_ids as $section_id){
            for($uid=1;$uid<=$maxuid;$uid++){
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array(
                    'level',
                    'canzhang'
                ));
                if(is_array($data['canzhang'])){
                    foreach($data['canzhang'] as $canzhang_tag => $canzhang_num){
                        if($canzhang_num > 0){
                            $key = 'mj_'.$section_id.'_'.$canzhang_tag.'_'.$data['level'];
                            $redis->sadd($key,$uid);
                            echo "$uid\t$key\n";
                        }
                    }
                }
            }
        }
    }
    public function action_stat_jianghu(){
        $section_config = getApp()->getSectionConfig();
        $section_ids = array_keys($section_config);
        $maxuid = model_LoginUser::maxuid();
		//$task_serial_config = PL_Config_Numeric::get('jianghu/guanqia',$task_serial_id);

		$all_tasks_config = PL_Config_Numeric::get('jianghu/guanqia');
        $stat = array();
        foreach($section_ids as $section_id){
            for($uid=1;$uid<=$maxuid;$uid++){
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array(
                    'task',
                    //'task'=>array('5001'),
                    //'task'=>array('5001'=>array('500101')),
                ));
                foreach($all_tasks_config as $task_serial_id => $task_serial_config){
                    if(!isset($task_serial_config['name'])) continue;
                    $task_configs = PL_Config_Numeric::get($task_serial_config['task_config_url']);
                    $task_serial_finished = 1;
                    foreach($task_configs as $task_id=>$task_config){
                        if($data['task'][$task_serial_id][$task_id]['succ']==0){
                            $task_serial_finished = 0;
                        }else{
                            $stat[$task_id] += 1;
                        }
                        //pp($data);
                        //pp($data['task'][$task_serial_id][$task_id]);
                    }
                    if($task_serial_finished){
                        $stat[$task_serial_id] += 1;
                    }
                    //$c = PL_Config_Numeric::get('translate',$task_serial_config['name']);
                    //echo "$uid\t$task_serial_id\t{$c['zh_CN']}\t$task_serial_finished\n";
                }
                //$tasks = $player->groupGet('task');
                //pp($tasks);
            }
        }
        echo "大关卡通过情况:\n";
        foreach($all_tasks_config as $task_serial_id => $task_serial_config){
            if(!isset($task_serial_config['name'])) continue;
            $c = PL_Config_Numeric::get('translate',$task_serial_config['name']);
            echo "$task_serial_id,{$c['zh_CN']},{$stat[$task_serial_id]}\n";
        }
        echo "小关卡通过情况:\n";
        foreach($all_tasks_config as $task_serial_id => $task_serial_config){
            if(!isset($task_serial_config['name'])) continue;
            $task_configs = PL_Config_Numeric::get($task_serial_config['task_config_url']);
            foreach($task_configs as $task_id=>$task_config){
                $c = PL_Config_Numeric::get('translate',$task_config['name']);
                echo "$task_id,{$c['zh_CN']},{$stat[$task_id]}\n";
            }
        }
    }
    public function action_event(){
        $maxuid = model_LoginUser::maxuid();
        $section_id = 's3';
        //$maxuid = 10;
        echo "PID,UID,门派名,累计付费（元）,活动期间付费（元）,奖券数量,vip等级,游戏等级\n";
        $mon = getApp()->getGemLogMongoConnection();
        for($uid=1;$uid<=$maxuid;$uid++){
            $player = new model_Player($uid,$section_id);
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1));
            $pid = $login_model['pid'];
            $data = $player->getFields(array(
                'total_gem_added',
                'name',
                'vip',
                'level',
                'evt120921',
            ));
            $lottery = $data['evt120921']['lottery'] + $data['evt120921']['extra_lottery'];
            $cash = $data['total_gem_added']/10;
            if($lottery>0){
                $begin = 1348237841;
                $rows = $mon->find(array('_u'=>$uid,'status'=>StatusCode::payment_finished,'action'=>'recharge_gem','finish_t'=>array('$gte'=>$begin)));
                $cash2 = 0;
                foreach($rows as $r){
                    $cash2 += $r['cash'];
                }
                echo "$pid,$uid,'{$data['name']}',$cash,$cash2,$lottery,{$data['vip']['lvl']},{$data['level']}\n";
            }
        }
    }
    public function action_stat(){
        $pids = array(
            'jianghaiwunn',
            'mrh19840623',
            '953953',
        );
        //$maxuid = model_LoginUser::maxuid();
        $section_id = 's3';
        foreach($pids as $pid){
            $um = model_LoginUser::searchUniq('pid',$pid,true);
            if($um){
                $d = &$um->doc();
                $uid = $d['_id'];
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array(
                    'level',
                    '_ll',
                ));
                echo "$pid,{$data['level']},{$data['_ll']['cd']}\n";
            }else{
                echo "$pid,0,0\n";
            }
        }
    }
    public function action_compensation(){
        return;
        $maxuid = model_LoginUser::maxuid();
        $section_id = 's3';
        $mon = getApp()->getPaymentMongoConnection();
        $keys =array('_u'=>1,'_sec'=>1);
        $initial = array('total_gem_added'=>0,'total_cash'=>0);
        $reduce = "function (obj, prev) { prev.total_gem_added += obj.agem; prev.total_cash += obj.cash; }";
        $condition = array('_sec'=>$section_id,'status'=>StatusCode::payment_finished,'action'=>'recharge_gem','istest'=>array('$ne'=>1),'finish_t'=>array('$lt'=>strtotime('2012-09-26 12:00')));
        $rows = $mon->getmc()->group($keys,$initial,$reduce,array('condition'=>$condition));
        foreach($rows['retval'] as $r){
            if($r['total_cash'] > 500){
                $uid = $r['_u'];
                $total_cash = $r['total_cash'];
                //echo "{$r['_u']},{$r['_sec']},{$r['total_gem_added']},{$r['total_cash']}\n";
                $reward_gem = min(5000,($total_cash - 500) * 10);
                echo "$uid,$total_cash,$reward_gem\n";

                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>"掌门，充值开通单笔1000元功能了！为感谢掌门累计充值超过500元，特赠送{$reward_gem}元宝，助您叱咤江湖！",
                );
                $awards = array(
                    array('tag'=>'gem','num'=>$reward_gem),
                );
                $msg['status'] = 'award';
                $cdkey = model_Cdkey::gen($awards,"{$reward_gem}元宝");
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$section_id);
            }
        }
        /*
         */
        $uid = 2451;$reward_gem =1000;

    }
    public function action_compensation2(){
                $payment_event_awards = array(
                    array(
                        'total_cash'=>50,
                        'award'=>array(
                            array('tag'=>'gem','num'=>50),
                            array('tag'=>'302001','num'=>1),
                        ),
                        'desc'=>"50元宝，化功大法",
                    ),
                    array(
                        'total_cash'=>100,
                        'award'=>array(
                            array('tag'=>'gem','num'=>100),
                            array('tag'=>'302003','num'=>1),
                        ),
                        'desc'=>"100元宝，长生功",
                    ),
                    array(
                        'total_cash'=>200,
                        'award'=>array(
                            array('tag'=>'gem','num'=>200),
                            array('tag'=>'302002','num'=>1),
                            array('tag'=>'233002','num'=>1),
                        ),
                        'desc'=>"200元宝，金钟罩，天罡符",
                    ),
                    array(
                        'total_cash'=>500,
                        'award'=>array(
                            array('tag'=>'gem','num'=>500),
                            array('tag'=>'301004','num'=>1),
                            array('tag'=>'232005','num'=>1),
                        ),
                        'desc'=>"500元宝，九阳神功，武曲令",
                    ),
                    array(
                        'total_cash'=>1000,
                        'award'=>array(
                            array('tag'=>'gem','num'=>1000),
                            array('tag'=>'301006','num'=>1),
                            array('tag'=>'232001','num'=>1),
                        ),
                        'desc'=>"1000元宝，易筋经，圣火令",
                    ),
                    array(
                        'total_cash'=>2000,
                        'award'=>array(
                            array('tag'=>'gem','num'=>2000),
                            array('tag'=>'301005','num'=>1),
                            array('tag'=>'231001','num'=>1),
                        ),
                        'desc'=>"2000元宝，葵花宝典，青龙镯",
                    ),
                    array(
                        'total_cash'=>5000,
                        'award'=>array(
                            array('tag'=>'gem','num'=>5000),
                            array('tag'=>'301003','num'=>1),
                            array('tag'=>'221002','num'=>1),
                        ),
                        'desc'=>"5000元宝，九阴真经，软猬甲",
                    ),
                    array(
                        'total_cash'=>10000,
                        'award'=>array(
                            array('tag'=>'gem','num'=>10000),
                            array('tag'=>'301002','num'=>1),
                            array('tag'=>'211001','num'=>1),
                        ),
                        'desc'=>"10000元宝，北冥神功，玄铁重剑",
                    ),
                );
        $mon = getApp()->getPaymentMongoConnection();
        $keys = array('_u'=>1,'pid'=>1,'_sec'=>1);
        $initial = array('total_gem_added'=>0,'total_cash'=>0);
        $reduce = "function (obj, prev) { prev.total_gem_added += obj.agem; prev.total_cash += obj.cash; }";
        $condition = array('status'=>StatusCode::payment_finished,'action'=>'recharge_gem',
            'istest'=>array('$ne'=>1),'finish_t'=>array('$lt'=>strtotime('2012-09-29 23:30'),'$gt'=>strtotime('2012-09-29 20:00')));
        $rows = $mon->getmc()->group($keys,$initial,$reduce,array('condition'=>$condition));
        foreach($rows['retval'] as $r){
            $uid = $r['_u'];
            $total_cash = $r['total_cash'];
            $total_gem_added = $r['total_gem_added'];
            $section_id = $r['_sec'];
            $pid = $r['pid'];
            echo "$uid,$pid,$section_id,$total_cash,$total_gem_added\n";

                $player = new model_Player($uid,$section_id);
                $event_data = $player->objectGet('base','evt120930');
                if(is_null($event_data)){
                    $event_data = array(
                        'total_cash'=>0,
                    );
                }
                $old_total_cash = $event_data['total_cash'];
                $new_total_cash = $event_data['total_cash'] = $old_total_cash + $total_cash;
                $payment_msgs = array();
                foreach($payment_event_awards as $c){
                    if($c['total_cash'] <= $old_total_cash) continue;
                    if($c['total_cash'] > $new_total_cash) break;

                    $content = "您在节日期间累计付费超过{$c['total_cash']}元，送您".$c['desc']."！";
                    echo $content."\n";
                    $msg = array(
                        'type'=>'system',
                        'key'=>uniqid(),
                        'time'=>getApp()->now,
                        'content'=>$content,
                    );
                    $msg['status'] = 'award';
                    $cdkey = model_Cdkey::gen($c['award'],$c['desc']);
                    $msg['cdkey'] = $cdkey;

                    $payment_msgs[] = $msg;
                }
                $player->objectPut('base','evt120930',$event_data);
                $player->commit();
                foreach($payment_msgs as $msg){
                    model_Chat::sendMsg($msg,$player->uid,'origin',$player->section_id);
                }
        }
        /*
         */
        $uid = 2451;$reward_gem =1000;

    }
    public function action_fill_stat(){
        global $redis2 ;
        $redis2 = DbConfig::getRedis('cache');
        $maxuid = model_LoginUser::maxuid();
        //$today = date('ymd',getApp()->now);
        $today = $this->get_param('day');
        if(empty($today)){
            die("need param [day]");
        }
        function add2set($key,$value){
            global $redis2;
            echo "$key,$value\n";
            $redis2->sadd($key,$value);
        }
        for($uid=1;$uid<=$maxuid;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();

            $pid = $d['pid'];
            $device_id = $d['_ld']['device_id'];
            $create_day = date('ymd',$d['_ct']);
            $last_login_day = date('ymd',$d['_at']);

            echo "\n\n=========\n$uid,$pid,$device_id,$create_day,$last_login_day\n\n";
            add2set('total_user_count_pid_all',$pid);
            add2set('total_user_count_device_all',$device_id);
            if($create_day==$today){
                add2set("auth_pid_all_{$today}", $pid);
                add2set("auth_device_all_{$today}", $device_id);
            }
            if($create_day==$today || $last_login_day == $today){
                add2set("active_pid_all_{$today}", $pid);
                add2set("active_device_all_{$today}", $device_id);
            }
            echo "\n";
            if(empty($d['secs'])){
                $d['secs'] = array();
            }
            foreach($d['secs'] as $section_id=>$timestamp){
                $day = date('ymd',$timestamp);
                echo "$section_id,$day; ";
            }
            echo "\n";
            echo "\n";

            foreach($d['secs'] as $section_id=>$timestamp){
                $day = date('ymd',$timestamp);
                add2set("total_user_count_pid_{$section_id}",$pid);
                add2set("total_user_count_device_{$section_id}",$device_id);
                if($day==$today){
                    add2set("active_pid_{$section_id}_{$today}", $pid);
                    add2set("active_device_{$section_id}_{$today}", $device_id);
                    if($create_day == $today){
                        add2set("auth_pid_{$section_id}_{$today}", $pid);
                        add2set("auth_device_{$section_id}_{$today}", $device_id);
                    }
                }
            }
        }
    }

    public function action_bloodyrank(){
        $app = app();
        $now = $app->now;
        $last_day = date("Ymd",$now-86400);
        $section_config = $app->getSectionConfig();
        $section_ids = array_keys($section_config);
        $rank_reward_configs = PL_Config_Numeric::get("xuezhan/xuezhanrankreward");
        $zhenrong_hash = array(
            '5'=>"五人阵",
            '6'=>"六人阵",
            '7'=>"七人阵",
            '8'=>"八人阵",
        );
        if(P_PLATFORM == "kunlun"){
            $zhenrong_hash = array(
                '5'=>"五人陣",
                '6'=>"六人陣",
                '7'=>"七人陣",
                '8'=>"八人陣",
            );
        }

        ob_start();
        $xuezhan_chenghao = PL_Config_Numeric::get("chenghaosetting","xuezhan_rank");
        $redis = DbConfig::getRedis("lunjian");
        foreach($section_ids as $sec){
            echo "==============   $sec:   =================\n\n";
            foreach($zhenrong_hash as $zhenrongsize=>$zhenrongname){
                $rank_tag = "bloodyrank_{$zhenrongsize}_{$last_day}_{$sec}";
                $ranklist = $redis->zrevrange($rank_tag,0,19,"withscores");
                $current_place = 1;
                foreach($ranklist as $uid=>$score){
                    try{
                        $player = new model_Player($uid,$sec);
                        //------
                        if($current_place == 1){
                            //check possible
                            $player_d = $player->getFields(array('vip','reslimit'));
                            if(($player_d['vip']['lvl'] < 3 && $player_d['reslimit']['count_dizi_4'] < 2) || model_Util::inBlacklist($uid)){
                                $redis->zadd($rank_tag,-$score,$uid);
                                //model_Util::addBlacklist($uid,"血战数据有疑问，vip{$player_d['vip']['lvl']}, 排$current_place名");
                                echo "[$uid]血战数据有疑问，vip{$player_d['vip']['lvl']}, 甲弟子数量{$player_d['reslimit']['count_dizi_4']}，排{$current_place}名 or 在黑名单中\n";
                                continue;
                            }
                        }
                        //------
                        $battleinfo = $player->objectGet('base','bloodybattle');
                        if(!isset($battleinfo['historyinfo']['last_rank_d'])){
                            $last_rank_d = date("Ymd",$battleinfo['historyinfo']['start_t']);
                        }else{
                            $last_rank_d = $battleinfo['historyinfo']['last_rank_d'];
                        }
                        $days = (strtotime($last_day)-strtotime($last_rank_d))/86400;
                        $battleinfo['historyinfo']['fighting_days'] = $days;
                        $battleinfo['historyinfo']['last_rank_d'] = $last_day;
                        if($days == 1){
                            $battleinfo['historyinfo']['continus_rank_days']++;
                        }else{
                            $battleinfo['historyinfo']['continus_rank_days'] = 0;
                        }
                        $battleinfo['historyinfo']['last_rank_d'] = $last_day;
                        $player->objectPut('bloodybattle','historyinfo',$battleinfo['historyinfo']);

                        //todo add xuezhan rank chenghao, with time
                        foreach($xuezhan_chenghao as $xuezhan_rank_chenghao){
                            if($current_place <= $xuezhan_rank_chenghao['rank']){
                                break;
                            }
                        }
                        $chenghao = array(
                            'tag'=>$xuezhan_rank_chenghao['chenghaotag'],
                            'level'=>1,
                            'create_t'=>$app->now,
                        );
                        $player->objectPut("chenghao",$chenghao['tag'],$chenghao);

                        $player->commit();
                        $awards = $rank_reward_configs[$current_place]["reward_for_".$zhenrongsize];
                        $desc_str = model_Cdkey::descriptItems($awards);
                        $key = uniqid();
                        echo "$uid: ";
                        $content = "恭喜掌门在昨日守卫襄阳中表现神勇，闯入{$zhenrongname}排行榜，位列第{$current_place}名，特发奖励： $desc_str";
                        if(P_PLATFORM == "kunlun"){
                            $content = "恭喜掌門在昨日守衛襄陽中表現神勇，闖入{$zhenrongname}排行榜，位列第{$current_place}名，特發獎勵： $desc_str";
                        }
                        echo $content."\n";
                        //$now = getApp()->now;
                        $msg = array(
                            'key'=>$key,
                            'time'=>$now,
                            'content'=>$content,
                            'type'=>'system',
                        );
                        $msg['status'] = 'award';
                        $cdkey = model_Cdkey::gen($awards,$desc_str,1,"bloodyrank_{$last_day}_{$sec}");
                        $msg['cdkey'] = $cdkey;
                        model_Chat::sendMsg($msg,$player->uid,'origin',$sec);


                        $current_place ++;
                    }catch(Exception $excep){
                        $ex_msg = $excep->getMessage();
                        $ex_trace_msg = $excep->getTraceAsString();
                        $excep_content = "{$ex_msg}\n{$ex_trace_msg}";
                        $subject = "血战发放出错_".P_PLATFORM."_".$rank_tag."_".$uid;
                        model_Util::sendemail('op@playcrab.com,yewei@playcrab.com,kf@playcrab.com',$subject,$content);
                    }
                }
            }
        }

        // del ranks a week ago
        $last_week = $now - 86400*7;
        $last_week_str = date("Ymd",$last_week);
        echo ">>>>>>>>>>>>>>>>>>>>>>>>>delete ranks a week ago<<<<<<<<<<<<<<<<<<<<\n";
        foreach($section_ids as $sec){
            echo "==============   $sec:   =================\n\n";
            foreach($zhenrong_hash as $zhenrongsize=>$zhenrongname){
                $rank_tag = "bloodyrank_{$zhenrongsize}_{$last_week_str}_{$sec}";
                if($redis->del($rank_tag))
                    echo "[delete] :$rank_tag\n";
            }
        }
        $output_content = ob_get_contents();
        ob_end_clean();
        echo $output_content;
        $weekday = date("w",strtotime($last_day));
        $file_name = LOG_ROOT."/bloodyrank.$weekday.log";
        file_put_contents($file_name,$output_content);
    }

    public function action_fix_soul_bug(){
        $section_config = getApp()->getSectionConfig();
        $section_ids = array_keys($section_config);
        $maxuid = model_LoginUser::maxuid();
        foreach($section_ids as $sec){
            for($uid=1;$uid<=$maxuid;$uid++){
                $player = new model_Player($uid,$sec);
                $zhaomin_soul_num = $player->numberGet('soul','102029');
				if($zhaomin_soul_num)
				{
					echo "$sec:$uid:soul.102029:$zhaomin_soul_num\n";
					$player->numberIncr('soul','112029',$zhaomin_soul_num);
					$player->remove('soul','102029');
					$player->commit();
				}
            }
        }
    }


	public function action_test_reset_worldboss(){
		$redis = DbConfig::getRedis('worldboss');
		$world_boss_conf = PL_Config_Numeric::get('worldboss');

		$sections = array_keys(getApp()->getSectionConfig());

		foreach($world_boss_conf as $tag=>$conf){
			foreach($sections as $section){
				$yesterday = strtotime(date('Ymd',strtotime('-1 day')));
				$start_time = $conf['start_time'];
				$last_time  = $conf['last_time'];
				$now = getApp()->now;
				if($now > $yesterday + $start_time + $last_time){
					$date = date("md", strtotime("today"));
				}else{
					$date = date("md", strtotime("-1 days"));
				}

				$boss_key = "worldboss_boss_{$tag}_{$section}_{$date}";
				$rank_key = "worldboss_rank_{$tag}_{$section}_{$date}";
				$msg_key  = "worldboss_msg_{$tag}_{$section}_{$date}";

				$redis->del($boss_key);
				$redis->del($rank_key);
				$redis->del($msg_key);
			}
		}
	self::action_init_world_boss();
	}
	public function action_check_init_time(){
        $maxuid = model_LoginUser::maxuid();

        $start = $maxuid -1000;
        $start = 1;
        $end = $maxuid;
        
        for($uid=$start;$uid<$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            $create_time = $d['_ct'];
            $create_time = date('Y-m-d H:i:s',$create_time);

            $all_ok = true;
            foreach($d['secs'] as $section_id=>$timestamp){
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array(
                    'init_time',
                ));
                $init_time = $data['init_time'];

                $day = date('Y-m-d H:i:s',$timestamp);
                $init_t = $player->numberGet("base","init_time");
                if(!$init_t){
                    $all_ok = false;
                    echo "$uid,$section_id,create $create_time, access $day,$init_t\n";
                }
            }
            if ($all_ok){
                echo "$uid ok\n";
            }
        }
    }
	public function action_recover(){
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        //$start = $end = 9110;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            $create_time = $d['_ct'];
            $create_time = date('Y-m-d H:i:s',$create_time);

            $all_ok = true;
            foreach($d['secs'] as $section_id=>$timestamp){
                if($section_id =='s3' || $section_id == 's4'){
                    continue;
                }
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array(
                    'init_time',
                    'newbie',
                ));
                $init_time = $data['init_time'];
                if(!$init_time){
                    // 数据丢失
                    $all_ok = false;
                    //$day = date('Y-m-d H:i:s',$timestamp);
                    //echo "$uid,$section_id,create $create_time, access $day,$init_time\n";

                    echo "reinit [$uid][$section_id]\n";
                    $app  = getApp();
                    $um =  $app->getum($uid,'users',$section_id);
                    $um->initialize();

                    $player = new model_Player($uid,$section_id);
                    $data = array();

                }else{
                    // 数据回档
                }
                // 新手没有走完的人
                if($data['newbie']['isFinished']!=1){
                    echo "fill newbie [$uid][$section_id]\n";
                    $player->objectPut('base','newbie',array(
                        'finishPhaseArr'=>array(1,2,3,4,5,6,7,8,9,10,11,12,13),
                        'guideVersion'=>9001,
                        'isFinished'=>1,
                    ));
                    // 把新手的三个弟子全部发给玩家
                    $dizi_tags = array('102022','102023','102024');
                    foreach($dizi_tags as $dizi_tag){
                        $dizi_object = $player->objectGet('peoples',$dizi_tag);
                        if(empty($dizi_object)){
                            echo "add dizi[$uid][$section_id][$dizi_tag]\n";
                            $dizi_object = array('tag'=>$dizi_tag,'level'=>5,'exp'=>0,'create_t'=>getApp()->now);
                            $player->objectPut('peoples',$dizi_tag,$dizi_object);
                        }
                    }
                    $name = $player->stringGet('base','name');
                    if(empty($name)){
                        $name = model_Util::randomName();
                        $player->stringPut('base','name',$name);
                        echo "set name [$uid][$section_id][$name]\n";
                    }
                    $player->commit();
                    echo "=====\n";
                }
            }
            if ($all_ok){
                //echo "$uid ok\n";
            }
        }
    }
	public function action_shenxianjiejie(){
        // 所有人的神仙姐姐拜访时间 +1
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        //$end = 100;

        //$start = $end = 9110;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                $player = new model_Player($uid,$section_id);
                $object = $player->objectGet('qiyu','activity_shenxianjiejie');
                if(empty($object)){
                    echo "$section_id,$uid,empty\n";
                    continue;
                }
                if(!is_null($object['last_t'])){
                    //"last_t": 1350793798,
                    $last_time = $object['last_t'];
                    $day = date('ymd',$last_time);
                    if($day!="121030"){
                        $object['last_t'] += 86400;
                        $last_time2 = $object['last_t'];
                        $day2 = date('ymd',$last_time2);
                        echo "$section_id,$uid, fix $last_time ($day) => $last_time2 ($day2), ".json_encode($object)."\n";
                        $player->objectPut('qiyu','activity_shenxianjiejie',$object);
                        $player->commit();
                    }else{
                        echo "$section_id,$uid,$day ok\n";
                    }
                    //date('Y-m-d H:i:s',$last_time);
                }
            }
        }
    }
	public function action_chongzhi(){
        $mon = getApp()->getPaymentMongoConnection();
        //$begin = 1351530000;
        $begin = strtotime("2012-12-02 01:00:00");
        $rows = $mon->find(array('status'=>StatusCode::payment_finished,'action'=>'recharge_gem','_sec'=>'s1','finish_t'=>array('$gte'=>$begin)),array(),array('_tm'=>1));
        //$rows = $mon->find(array('status'=>StatusCode::payment_finished,'action'=>'recharge_gem'),array(),array('_tm'=>1));
        $payments = array();
        $payments_check = array();
        foreach($rows as $r){
            $uid = $r['_u'];
            $section_id = $r['_sec'];

            if(0){
                if($r['finish_t']>=$begin){
                    if(empty($payments[$section_id][$uid])){
                        $player = new model_Player($uid,$section_id);
                        $payments[$section_id][$uid] = $player->numberGet('base','total_gem_added');
                    }
                    $payments[$section_id][$uid] += $r['agem'];
                }
                $payments_check[$section_id][$uid] += $r['agem'];
            }else{
                //echo json_encode($r)."\n";
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array(
                    'vip','gem','total_gem_added','total_gem_rewarded','total_gem_rewarded2','total_gem_used'
                ));
                echo "before: $uid,$section_id,".json_encode($data)."\n";
                $player->process_payment2($r);
                foreach(array('vip','gem','total_gem_added','total_gem_rewarded','total_gem_rewarded2','total_gem_used') as $k){
                    $data2[$k] = $player->objectGet('base',$k);
                }
                echo "after: ".json_encode($data2)."\n";
                $player->commit();
                echo "======\n\n";
            }
        }
        /*
        foreach($payments as $section_id=>$xxx){
            foreach($xxx as $uid=>$added_gem){
                if($payments_check[$section_id][$uid]!=$added_gem){
                    echo "$section_id,$uid, right :{$payments_check[$section_id][$uid]}, $added_gem\n";
                }
            }
        }
         */
        /*
         */
        /*
        var_dump($payments);
        foreach($payments as $section_id=>$xxx){
            foreach($xxx as $uid=>$added_gem){
                $player = new model_Player($uid,$section_id);
                $total_gem_added = $player->numberGet('base','total_gem_added');
                //$total_gem_added + $added_gem 

                $rows = $mon->find(array('_sec'=>$section_id),'status'=>StatusCode::payment_finished,'action'=>'recharge_gem','finish_t'=>array('$gte'=>$begin)),array(),array('_tm'=>1));

            }
        }
         */
    }
	public function action_check_chongzhi(){
        $mon = getApp()->getPaymentMongoConnection();
        $rows = $mon->find(array('status'=>StatusCode::payment_finished,'action'=>'recharge_gem'),array(),array('_tm'=>1));
        $payments = array();
        $payments_check = array();
        foreach($rows as $r){
            $uid = $r['_u'];
            $section_id = $r['_sec'];

            $payments_check[$section_id][$uid] += $r['agem'];
        }
        foreach($payments_check as $section_id=>$xxx){
            foreach($xxx as $uid=>$added_gem){
                $player = new model_Player($uid,$section_id);
                $total_gem_added = $player->numberGet('base','total_gem_added');
                if($total_gem_added != $added_gem){
                    $login_model = new model_LoginUser($uid);
                    $login_model->get(array('pid'=>1,'istest'=>1));
                    $d = $login_model->doc();
                    echo "$uid,$section_id,$total_gem_added,$added_gem,{$d['pid']},{$d['istest']}\n";
                }
            }
        }
    }
    public function action_chongzhi50(){
        $mon = getApp()->getPaymentMongoConnection();
        $begin = 1351530000;
        //$begin = 1351530371;
        $rows = $mon->find(array('status'=>StatusCode::payment_finished,'action'=>'recharge_gem','finish_t'=>array('$gte'=>$begin)),array(),array('_tm'=>1));
        $payments_check = array();
        foreach($rows as $r){
            $uid = $r['_u'];
            $section_id = $r['_sec'];
            //$payments_check[$section_id][$uid] += $r['gem_add_and_reward'];
            $payments_check[$section_id][$uid] += $r['agem'];
        }
        foreach($payments_check as $section_id=>$xxx){
            foreach($xxx as $uid=>$added_gem){
                //$player = new model_Player($uid,$section_id);
                $reward_gem = $added_gem/2;
                $cash = $added_gem/10;
                echo "$uid,$section_id,$added_gem,$reward_gem\n";
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>"为感谢您的支持，在故障期间您一共充值{$cash}元人民币，在此补偿您额外{$reward_gem}元宝。 ",
                );
                $awards = array(
                    array('tag'=>'gem','num'=>$reward_gem),
                );
                $msg['status'] = 'award';
                echo $msg['content']."\n";
                $cdkey = model_Cdkey::gen($awards,"{$reward_gem}元宝");
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$section_id);
            }
        }
    }
    public function action_buchang1030(){
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        //$start = $end = 8;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                $player = new model_Player($uid,$section_id);
                echo "==========\n";
                echo "$uid,$section_id\n";
                if($section_id =='s3' || $section_id == 's4'){
                    $msg = array(
                        'type'=>'system',
                        'key'=>uniqid(),
                        'time'=>getApp()->now,
                        'content'=>"为感谢您的支持，在此为您提供叫花鸡*3、补元丹*3。",
                    );
                    $awards = array(
                        array('tag'=>'601001','num'=>3),
                        array('tag'=>'601002','num'=>3),
                    );
                    $msg['status'] = 'award';
                    echo $msg['content']."\n";
                    $cdkey = model_Cdkey::gen($awards,"叫花鸡、补元丹补偿");
                    $msg['cdkey'] = $cdkey;
                    model_Chat::sendMsg($msg,$uid,'origin',$section_id);
                }else{
                    $msg = array(
                        'type'=>'system',
                        'key'=>uniqid(),
                        'time'=>getApp()->now,
                        'content'=>"为感谢您的支持，在此为您提供叫花鸡*5、补元丹*5、培养丹*600、破军令*1。",
                    );
                    $awards = array(
                        array('tag'=>'601001','num'=>5),
                        array('tag'=>'601002','num'=>5),
                        array('tag'=>'601019','num'=>600),
                        array('tag'=>'232003','num'=>1),
                    );
                    $msg['status'] = 'award';
                    echo $msg['content']."\n";
                    $cdkey = model_Cdkey::gen($awards,"故障补偿");
                    $msg['cdkey'] = $cdkey;
                    model_Chat::sendMsg($msg,$uid,'origin',$section_id);
                    $vip = $player->numberGet('vip','lvl');
                    if($vip>=3){
                        $msg = array(
                            'type'=>'system',
                            'key'=>uniqid(),
                            'time'=>getApp()->now,
                            'content'=>"为感谢您的支持，对vip3及以上用户，在此为您提供圣火令*1.",
                        );
                        $awards = array(
                            array('tag'=>'232001','num'=>1),
                        );
                        $msg['status'] = 'award';
                        echo $msg['content']."\n";
                        $cdkey = model_Cdkey::gen($awards,"故障补偿2");
                        $msg['cdkey'] = $cdkey;
                        model_Chat::sendMsg($msg,$uid,'origin',$section_id);
                    }
                }
            }
        }
    }

    public function action_add_zhidian(){
        $uid = $this->get_param('uid');
        $sec = $this->get_param('sec');
        $items = array(
            array('tag'=>"qiyu_zhidian",'level'=>45,'num'=>1),
        );
        $desc = model_Cdkey::descriptItems($items);
        $msg = array(
            'type'=>'system',
            'key'=>uniqid(),
            'time'=>getApp()->now,
            'content'=>"$desc",
        );
        $msg['status'] = 'award';
        $cdkey = model_Cdkey::gen($items,$desc);
        $msg['cdkey'] = $cdkey;
        model_Chat::sendMsg($msg,$uid,'origin',$sec);
        echo "发送成功";
    }

	//补发奖励
	public function action_compensate_worldboss(){
        $section = $this->get_param('sec');
		$date = $this->get_param('date');
		$tag = $this->get_param('tag');
		if(empty($section)){
			$section_list = array_keys(getApp()->getSectionConfig());
		}else{
			$section_list = (array)$section;
		}
		$redis = DbConfig::getRedis("worldboss");
		$world_boss_conf = PL_Config_Numeric::get('worldboss', $tag);
		$boss_name = PL_Config_Numeric::get('translate', $world_boss_conf['bossname']);
		$boss_name = $boss_name['zh_CN'];

		foreach($section_list as $section){
			$world_boss_key = "worldboss_boss_{$tag}_{$section}_{$date}";
			$boss_info = $redis->hgetall($world_boss_key);
			echo "<<<<<<<<<<<<<<<<< section $section >>>>>>>>>>>>>>>>>\n";
			print_r($boss_info);
			if($boss_info['boss_hp_left'] <= 0 && $boss_info['compensate'] != 1){
				//
				$rank_key = "worldboss_rank_{$tag}_{$section}_{$date}";
				$rank_list = $redis->zrevrange($rank_key, 0, 9);
				echo "rank_list = \n";
				print_r($rank_list);
				$boss_level    = $boss_info['boss_level'];
				$default_level = $world_boss_conf['default_level'];
				foreach($rank_list as $top_rank => $top_uid){
					$reward_rank_pyd   = $world_boss_conf['rank_pyd'][$top_rank];
					$reward_rank_money = $world_boss_conf['rank_money'][$top_rank] * ($boss_level - $default_level + 5);
					$wb_rank = $top_rank+1;
					$top_user_info = model_CacheUtil::getInfoByIdUseCache($top_uid,$section,array('level'));
					//$worldboss_zhidian_offset = PL_Config_Numeric::get('setting','worldboss_zhidian_level_offset');
					$rank_awards = array(
						array('tag'=>'601019','num'=>$reward_rank_pyd),
						array('tag'=>'money' ,'num'=>$reward_rank_money),
						//array('tag'=>'qiyu_zhidian','level'=>$top_user_info['level']*3+$worldboss_zhidian_offset,'num'=>1),
					);
					print_r($rank_awards);
					$desc_str = model_Cdkey::descriptItems($rank_awards);
					$rank_msg = array(
						'type'=>'system',
						'key'=>uniqid(),
						'time'=>getApp()->now,
						'content'=>"恭喜掌门在群雄破阵[$boss_name]时表现神勇，进入排行榜第{$wb_rank}名。额外奖励：$desc_str",
					);
					$rank_msg['status'] = 'award';
					$cdkey = model_Cdkey::gen($rank_awards,$desc_str);
					$rank_msg['cdkey'] = $cdkey;
					model_Chat::sendMsg($rank_msg, $top_uid,'origin',$section);
					print_r($rank_msg);
					$redis->hset($world_boss_key, 'compensate', 1);
				}
			}
		}

	}

    public function action_get_all_userlogininfo(){
        $maxuid = model_LoginUser::maxuid();
        for($uid=1;$uid<=$maxuid;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();

            $pid = $d['pid'];
            $device_id = $d['_ld']['device_id'];
            $create_day = date('ymd',$d['_ct']);
            $last_login_day = date('ymd',$d['_at']);

            //echo "\n\n=========\n$uid,$pid,$device_id,$create_day,$last_login_day\n\n";

            if(!is_array($d['secs'])){
                continue;
            }
            foreach($d['secs'] as $section_id=>$timestamp){
                $player = new model_Player($uid,$section_id);
                $player_d = $player->getFields(array("_it","login_t","level","name","vip"));
                echo "uid=$uid,pid=$pid,sec=$section_id,device_id=$device_id,_ct={$d['_ct']},_it={$player_d['_it']},_at={$d['_at']},_lt={$player_d['login_t']},name={$player_d['name']},level={$player_d['level']},vip={$player_d['vip']['lvl']}\n";
            }
        }
    }

	public function action_recover1202_s1(){
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        //$start = $end = 9;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            $create_time = $d['_ct'];
            $create_time = date('Y-m-d H:i:s',$create_time);

            $all_ok = true;
            foreach($d['secs'] as $section_id=>$timestamp){
                if($section_id !='s1'){
                    continue;
                }
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array(
                    'init_time',
                    'newbie',
                ));
                $init_time = $data['init_time'];
                if(!$init_time){
                    // 数据丢失
                    $all_ok = false;
                    //$day = date('Y-m-d H:i:s',$timestamp);
                    //echo "$uid,$section_id,create $create_time, access $day,$init_time\n";

                    echo "reinit [$uid][$section_id]\n";
                    $app  = getApp();
                    $um =  $app->getum($uid,'users',$section_id);
                    $um->initialize();

                    $player = new model_Player($uid,$section_id);
                    $data = array();

                }else{
                    // 数据回档
                }
                // 新手没有走完的人
                if($data['newbie']['isFinished']!=1){
                    echo "fill newbie [$uid][$section_id]\n";
                    $player->objectPut('base','newbie',array(
                        'finishPhaseArr'=>array(1,2,3,4,5,6,7,8,9,10,11,12,13),
                        'guideVersion'=>9001,
                        'isFinished'=>1,
                    ));
                    // 把新手的三个弟子全部发给玩家
                    $dizi_tags = array('102022','102023','102024');
                    foreach($dizi_tags as $dizi_tag){
                        $dizi_object = $player->objectGet('peoples',$dizi_tag);
                        if(empty($dizi_object)){
                            echo "add dizi[$uid][$section_id][$dizi_tag]\n";
                            $dizi_object = array('tag'=>$dizi_tag,'level'=>5,'exp'=>0,'create_t'=>getApp()->now);
                            $player->objectPut('peoples',$dizi_tag,$dizi_object);
                        }
                    }
                    $name = $player->stringGet('base','name');
                    if(empty($name)){
                        $name = model_Util::randomName();
                        $player->stringPut('base','name',$name);
                        echo "set name [$uid][$section_id][$name]\n";
                    }
                    $player->commit();
                    echo "=====\n";
                }
            }
            if ($all_ok){
                //echo "$uid ok\n";
            }
        }
    }
    public function action_buchang1202(){
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        //$start = $end = 9;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                $player = new model_Player($uid,$section_id);
                echo "==========\n";
                echo "$uid,$section_id\n";
                if($section_id =='s2' || $section_id =='s3' || $section_id == 's4'){
                    $msg = array(
                        'type'=>'system',
                        'key'=>uniqid(),
                        'time'=>getApp()->now,
                        'content'=>"为感谢您的支持，在此为您提供叫花鸡*3、补元丹*3。",
                    );
                    $awards = array(
                        array('tag'=>'601001','num'=>3),
                        array('tag'=>'601002','num'=>3),
                    );
                    $msg['status'] = 'award';
                    echo $msg['content']."\n";
                    $cdkey = model_Cdkey::gen($awards,"叫花鸡、补元丹补偿");
                    $msg['cdkey'] = $cdkey;
                    model_Chat::sendMsg($msg,$uid,'origin',$section_id);
                }else{
                    $msg = array(
                        'type'=>'system',
                        'key'=>uniqid(),
                        'time'=>getApp()->now,
                        'content'=>"为感谢您的支持，在此为您提供叫花鸡*5、补元丹*5、培养丹*600、武曲令*1。",
                    );
                    $awards = array(
                        array('tag'=>'601001','num'=>5),
                        array('tag'=>'601002','num'=>5),
                        array('tag'=>'601019','num'=>600),
                        array('tag'=>'232005','num'=>1),
                    );
                    $msg['status'] = 'award';
                    echo $msg['content']."\n";
                    $cdkey = model_Cdkey::gen($awards,"故障补偿");
                    $msg['cdkey'] = $cdkey;
                    model_Chat::sendMsg($msg,$uid,'origin',$section_id);
                    $vip = $player->numberGet('vip','lvl');
                    if($vip>=3){
                        $msg = array(
                            'type'=>'system',
                            'key'=>uniqid(),
                            'time'=>getApp()->now,
                            'content'=>"为感谢您的支持，对vip3及以上用户，在此为您提供圣火令*1.",
                        );
                        $awards = array(
                            array('tag'=>'232001','num'=>1),
                        );
                        $msg['status'] = 'award';
                        echo $msg['content']."\n";
                        $cdkey = model_Cdkey::gen($awards,"故障补偿2");
                        $msg['cdkey'] = $cdkey;
                        model_Chat::sendMsg($msg,$uid,'origin',$section_id);
                    }
                }
            }
        }
    }
	public function action_chongzhi1202(){
        $mon = getApp()->getPaymentMongoConnection();
        //$begin = 1351530000;
        $begin = strtotime("2012-12-02 01:00:00");
        $rows = $mon->find(array('status'=>StatusCode::payment_finished,'action'=>'recharge_gem','_sec'=>'s1','finish_t'=>array('$gte'=>$begin)),array(),array('_tm'=>1));
        $payments = array();
        $payments_check = array();
        $total_cash = 0;
        foreach($rows as $r){
            $uid = $r['_u'];
            $section_id = $r['_sec'];

            echo json_encode($r)."\n";
            $player = new model_Player($uid,$section_id);
            $data = $player->getFields(array(
                'vip','gem','total_gem_added','total_gem_rewarded','total_gem_rewarded2','total_gem_used'
            ));
            echo "before: $uid,$section_id,".json_encode($data)."\n";
            $player->process_payment2($r);
            foreach(array('vip','gem','total_gem_added','total_gem_rewarded','total_gem_rewarded2','total_gem_used') as $k){
                $data2[$k] = $player->objectGet('base',$k);
            }
            echo "after: ".json_encode($data2)."\n";
            $player->commit();
            echo "======\n\n";
            $total_cash += $r['cash'];
        }
        echo $total_cash."\n";
    }
    public function action_chongzhi1202_50(){
        $mon = getApp()->getPaymentMongoConnection();
        $begin = strtotime("2012-12-02 01:00:00");
        $rows = $mon->find(array('status'=>StatusCode::payment_finished,'_sec'=>'s1','action'=>'recharge_gem','finish_t'=>array('$gte'=>$begin)),array(),array('_tm'=>1));
        $payments_check = array();
        foreach($rows as $r){
            $uid = $r['_u'];
            $section_id = $r['_sec'];
            $payments_check[$section_id][$uid] += $r['agem'];
        }
        foreach($payments_check as $section_id=>$xxx){
            foreach($xxx as $uid=>$added_gem){
                $reward_gem = $added_gem/2;
                $cash = $added_gem/10;
                echo "$uid,$section_id,$added_gem,$reward_gem\n";
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>"为感谢您的支持，在故障期间您一共充值{$cash}元人民币，在此补偿您额外{$reward_gem}元宝。 ",
                );
                $awards = array(
                    array('tag'=>'gem','num'=>$reward_gem),
                );
                $msg['status'] = 'award';
                echo $msg['content']."\n";
                $cdkey = model_Cdkey::gen($awards,"{$reward_gem}元宝");
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$section_id);
            }
        }
    }
    public function action_find_unusual_user(){
        $section_config = getApp()->getSectionConfig();
        $section_ids = array_keys($section_config);
        $maxuid = model_LoginUser::maxuid();
        foreach($section_ids as $section_id){
            for($uid=1;$uid<=$maxuid;$uid++){
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array('vip','level','reslimit'));
                if($data['vip']['lvl']<2 && $data['level'] < 6 && $data['reslimit']['count_dizi_4'] > 1){
                    echo "[$uid][$section_id], vip:{$data['vip']['lvl']}, level:{$data['level']}, cnt_dizi_4:{$data['reslimit']['count_dizi_4']}\n";
                }
            }
        }
    }
    public function action_init_chenghao_info(){
        $maxuid = model_LoginUser::maxuid();
        $start = 1;
        $end = $maxuid;
        $redis = DbConfig::getRedis("lunjian");
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                //初始化称号相关的一些统计值
                //lunjian
                $player = new model_Player($uid,$section_id);
                $history_lunjian_rank = $player->numberGet("statistics","history_lunjian_rank");
                echo "[$uid][$section_id] ";
                if(!$history_lunjian_rank){
                    $lj_user_key = model_PVPUtil::getLunjianUserID($section_id, $uid);
                    $rank_info = $redis->hgetall($lj_user_key);
                    if($rank_info){
                        echo "lunjian_rank:{$rank_info['rank']}";
                        $player->numberPut("statistics","history_lunjian_rank",$rank_info['rank']);
                    }
                }
                //
                //friend_cnt
                $friend_cnt = $player->numberGet('base','cnt_friends');
                if(!$friend_cnt){
                    $friends= $player->objectGetAll('friend');
                    $friend_cnt = count($friends);
                    echo "\t\tfriend_cnt :$friend_cnt";
                    $player->numberPut("base","cnt_friends",$friend_cnt);
                }
                echo "\n";

                $player->commit();
            }
        }
    }
	public function action_find_worldboss_abnormal_user(){
        $section = $this->get_param('sec');
		if(empty($section)){
			$section_list = array_keys(getApp()->getSectionConfig());
		}else{
			$section_list = (array)$section;
		}
		if(empty($section_list)){
			throw new Exception('section error');
			return;
		}
		$now = getApp()->now;
        $redis = DbConfig::getRedis('worldboss');
		$redis_set = DbConfig::getRedis('cache');
		$world_boss_conf =  PL_Config_Numeric::get('worldboss');

		$today = date('md', $now);
		foreach($section_list as $section){
			echo "-----------[$section]-----------\n";
			foreach($world_boss_conf as $tag => $conf){
				if($tag != '1001'){
					continue;
				}
				$boss_rank_key = "worldboss_rank_{$tag}_{$section}_{$today}"; 
				echo "boss_rank_key = $boss_rank_key\n";

				$ranks = $redis->zrevrange($boss_rank_key, 0 , 19, true);
				$uid_arr = array_keys($ranks);
				$udatas = model_CacheUtil::getUserWorldBossInfoByIds($uid_arr, $tag, $section);
				foreach($ranks as $uid=>$dmg){
					$role_data = $udatas[$uid];
					$vip = $role_data['vip']['lvl'];
					$level = $role_data['level'];
					$attack_count = $role_data['worldboss'][$tag]['attack_count'];
					echo "uid = $uid, vip = $vip, level = $level,  dmg = $dmg\n";
					$ave_dmg = $dmg / $attack_count;
					if($vip == 2 && $level < 21 && $ave_dmg > 58900){
						echo "--------warning--------\n";
						echo "uid = $uid, attack_count = $attack_count, average_damage = $ave_dmg\n";
						echo "-----------------------\n";
						//$redis->zrem($boss_rank_key, $uid);
					}
				}
			}
		}
	}
	//世界boss奖励发放
	public function action_worldboss_reward(){
        $section = $this->get_param('sec');
        $today   = $this->get_param('date');//指定日期，格式：1030，代表十月30号
		if(empty($section)){
			$section_list = array_keys(getApp()->getSectionConfig());
		}else{
			$section_list = (array)$section;
		}
		if(empty($section_list)){
			throw new Exception('section error');
			return;
		}
		$now = getApp()->now;
        $redis = DbConfig::getRedis('worldboss');
		$redis_set = DbConfig::getRedis('cache');
		if(empty($today)){
			$today = date('md', $now);
		}
		$world_boss_conf = PL_Config_Numeric::get('worldboss');
        $pozhen_chenghao = PL_Config_Numeric::get("chenghaosetting","pozhen_rank");
		echo "================[ date = $today ]===============\n";
		foreach($section_list as $section){
			foreach($world_boss_conf as $tag => $conf){
				if($tag != '1001'){
					//continue;
				}
				$boss_key = "worldboss_boss_{$tag}_{$section}_{$today}";
				$rank_key = "worldboss_rank_{$tag}_{$section}_{$today}";
				echo "================[ $boss_key ]===============\n";
				$boss_info = $redis->hgetall($boss_key);

				if($boss_info['boss_hp_left'] > 0 || $boss_info['reward_time'] ){
					$dead = $boss_info['boss_hp_left'] > 0 ? "boss未死亡":"boss死亡";
					if($boss_info['reward_time']){
						$dead .= "补偿时间 : ". date('Y-m-d H:i:s', $boss_info['reward_time']) . "\n";
					}
					echo $dead."\n";
					continue;
				}
				$boss_name = PL_Config_Numeric::get('translate', $conf['bossname']);
				$boss_name = $boss_name['zh_CN'];
				//排行榜奖励 传书
				$rank_list = $redis->zrevrange($rank_key, 0, 9);
				$boss_level    = $boss_info['boss_level'];
				$default_level = $conf['default_level'];
				echo "boss_level = $boss_level, default_level = $default_level\n";
				foreach($rank_list as $top_rank => $top_uid){
					$reward_rank_pyd   = $conf['rank_pyd'][$top_rank];
					$reward_rank_money = $conf['rank_money'][$top_rank] * ($boss_level - $default_level + 5);
					$wb_rank = $top_rank+1;

					$top_user_info = model_CacheUtil::getInfoByIdUseCache($top_uid,$section,array('level'));
					print_r($top_user_info);
					$worldboss_zhidian_offset = PL_Config_Numeric::get('setting','worldboss_zhidian_level_offset');
					$rank_awards = array(
						array('tag'=>'601019','num'=>$reward_rank_pyd),
						array('tag'=>'money' ,'num'=>$reward_rank_money),
						array('tag'=>'qiyu_zhidian','level'=>max(1, $top_user_info['level']*3+$worldboss_zhidian_offset),'num'=>1),
					);
					echo "[reward] Rank = $wb_rank, uid = $top_uid >>>> \n";
					print_r($rank_awards);
					echo "[reward] <<<< \n";

					$desc_str = model_Cdkey::descriptItems($rank_awards);
					$rank_msg = array(
						'type'=>'system',
						'key'=>uniqid(),
						'time'=>getApp()->now,
						'content'=>"恭喜掌门在群雄破阵[$boss_name]时表现神勇，进入排行榜第{$wb_rank}名。额外奖励：$desc_str",
					);
                    if(P_PLATFORM == "kunlun"){
                        $rank_msg['content'] = "恭喜掌門在群雄破陣[$boss_name]時表現神勇，進入排行榜第{$wb_rank}名。額外獎勵：$desc_str";
                    }
					$rank_msg['status'] = 'award';
					$cdkey = model_Cdkey::gen($rank_awards,$desc_str);
					$rank_msg['cdkey'] = $cdkey;
					model_Chat::sendMsg($rank_msg, $top_uid,'origin',$section);

                    //
                    foreach($pozhen_chenghao as $pozhen_rank_chenghao){
                        if($top_rank <= $pozhen_rank_chenghao['rank']){
                            break;
                        }
                    }
                    $chenghao = array(
                        'tag'=>$pozhen_rank_chenghao['chenghaotag'],
                        'create_t'=>$now,
                        'level'=>1,
                    );
                    $player = new model_Player($top_uid,$section);
                    $player->objectPut('chenghao',$pozhen_rank_chenghao['chenghaotag'],$chenghao);
                    $player->commit();
                    echo "add chenghao [{$pozhen_rank_chenghao['chenghaotag']}]\n";
				}
				$redis->hset($boss_key, 'reward_time', $now);
				echo " end ====\n";
			}
		}
	}
	//替换论剑某个位置为npc
	public function action_replace_lunjian(){
        $section = $this->get_param('sec');
		$rank = $this->get_param('rank');
		if(!$section || !$rank){
			throw new Exception("section = $section ; rank = $rank error");
			return;
		}
        $redis = DbConfig::getRedis('lunjian');
		$now = time();

		echo "******* section = $section *******\n";
		$rank_key = model_PVPUtil::getLunjianListID($section);
		$rank_max_key = model_PVPUtil::getLunjianMaxUserID($section);
		$uid = $redis->hget($rank_key, $rank); // rank->uid
		$user_info_key = model_PVPUtil::getLunjianUserID($section, $uid);
		$udata = $redis->hgetall($user_info_key);

		$rank_max_key = model_PVPUtil::getLunjianMaxUserID($section);
		$total = $redis->hget($rank_max_key, 'max');
		$fill_id = $redis->hget($rank_max_key, 'npc_max');
		if(!$fill_id){
			$fill_id = 0;
		}
		echo "fill id = $fill_id ,total = $total\n";

		if($udata['rank'] !== $rank){
			echo "uid : $uid => rank = $rank, rank[in user info] = {$udata['rank']}\n";
			var_dump($udata['rank']);
			var_dump($rank);
			var_dump($udata['rank'] !== $rank);
			return;
		}
		$redis->del($user_info_key);

		$uid_new = "npc.".$fill_id++;
		echo "uid new = $uid_new\n";
		$redis->hset($rank_key, $rank, $uid_new);
		$uid_new_renwuname = model_Util::randomName();

		$renwutag_conf = PL_Config_Numeric::get('lunjian-npc-rule');
		$renwu_ranks = array_keys($renwutag_conf);

		array_push($renwu_ranks, $rank);
		sort($renwu_ranks);
		$index = min(array_search($rank, $renwu_ranks), count($renwu_ranks));
		$index = max(0, $index -1);
		$renwutag = $renwutag_conf[$renwu_ranks[$index]]['renwutag'];

		$uid_new_info = array(
			'rank'=>$rank,
			'rank_t'=>$now,
			'name'=>$uid_new_renwuname,
			'renwutag'=>$renwutag,
		);
		echo "info new = \n";
		print_r($uid_new_info);

		$new_user_info_key = model_PVPUtil::getLunjianUserID($section, $uid_new);
		echo "new user info key = $new_user_info_key\n";
		$redis->hmset($new_user_info_key, $uid_new_info);
		$redis->hset($rank_max_key, 'npc_max', $fill_id);
	}

	//删除世界boss里面的作弊玩家
	public function action_del_worldboss_user(){
        $section = $this->get_param('sec');
        $uid = $this->get_param('uid');
        $today   = $this->get_param('date');//指定日期，格式：20121030，代表2012年十月30号
        $tag = $this->get_param('tag'); //boss tag
		if(!$tag){
			$tag = '1001';
		}
		if(empty($section) || empty($uid)){
			throw new Exception("param  uid = [$uid] , section = [$section] error");
			return;
		}
		$now = getApp()->now;
        $redis = DbConfig::getRedis('worldboss');
		$redis_set = DbConfig::getRedis('cache');
		if(empty($today)){
			$today = date('md', $now);
		}
		$rank_key = "worldboss_rank_{$tag}_{$section}_{$today}";
		$rank = $redis->zrevrank($rank_key, $uid);
		if($rank !== false){
			echo "删除玩家: uid = $uid, 排名: $rank\n";
			$redis->zrem($rank_key, $uid);
		}else{
			echo "玩家: uid = $uid 不在表内\n";
		}
	}
    public function action_xuezhan_award_buchang(){
        $now = getApp()->now;
        $sec= $this->get_param('sec');//分区
		$date = $this->get_param('date');//排行的日期
        $size = $this->get_param('zhenrong');//阵容，5人阵，还是6人阵这种
        $diff = $this->get_param('diff');//移动的位数，即补偿奖励的差距
        $start = $this->get_param('start');//从第start个，开始往前移动diff个位置
        if(!$start){
            $start = 0;
        }
        $rank_reward_configs = PL_Config_Numeric::get("xuezhan/xuezhanrankreward");
        if(is_null($diff)){
            $diff = 1;
        }

        $redis = DbConfig::getRedis("lunjian");
        $rank_tag = "bloodyrank_{$size}_{$date}_{$sec}";
        echo "======$rank_tag======\n";
        //默认已经手动从redis中将那几个作弊的人移除，而且默认这几人排在前几位，后面的只是顺次往前移动diff位
        $ranklist = $redis->zrevrange($rank_tag,0,19,"withscores");
        $current_place = 1;
        foreach($ranklist as $uid=>$score){
            if($current_place <= $start){
                $current_place++;
                continue;
            }
            $awards = $rank_reward_configs[$current_place]["reward_for_".$size];
            $awards_before = $rank_reward_configs[$current_place+$diff]["reward_for_".$size];
            if(!$awards_before){
                $awards_before = array();
            }
            $awards_diff = array();
            $awards_change_sum = 0;
            foreach($awards as &$ai){
                foreach($awards_before as $af){
                    if($ai['tag'] == $af['tag']){
                        $ai['num'] -= $af['num'];
                    }
                }
                $awards_change_sum+=$ai['num'];
            }

            $desc_str = model_Cdkey::descriptItems($awards);
            $key = uniqid();
            echo "$uid: [$current_place]";
            $content = "血战补发奖励： $desc_str";
            echo $content."\n";
            //$now = getApp()->now;
            $msg = array(
                'key'=>$key,
                'time'=>$now,
                'content'=>$content,
                'type'=>'system',
            );
            $current_place ++;
            if(!$awards_change_sum){
                continue;
            }
            $msg['status'] = 'award';
            $cdkey = model_Cdkey::gen($awards,$desc_str,1,"{$rank_tag}_bufa");
            $msg['cdkey'] = $cdkey;
            model_Chat::sendMsg($msg,$uid,'origin',$sec);
            echo "\t send ok\n";
        }
    }
    public function action_redis_status(){
        foreach(DbConfig::$redises as $key=>$config){
            if($config['host'] && $config['port']){
                $redis = new Redis();
                $redis->connect($config['host'],$config['port']);
                $info = $redis->info();
                echo "$key\t{$config['host']}, {$config['port']},\t{$info['db0']},\t{$info['used_memory_human']}\n";
            }
        }
    }

    public function action_huodong_buchang_1212(){
        $mon = new  PL_Db_Mongo(DbConfig::getMongodb('log'));
        $mon->switchColl('oplog_20121212');
        $begin=strtotime("2012-12-12 00:00");
        $end = strtotime("2012-12-12 09:40");
        $ret = array();
        /*
        $rows = $mon->findByIndex("gemlog",array('action'=>'consume_gem','create_t'=>array('$gt'=>$begin,'$lt'=>$end),),100000,0,array(),array(),true);
        foreach($rows as $row){
            //pp($row);
            $date = date("Ymd",$row['create_t']);
            if($row['items'][0]['tag'] == "Hero.diziRecruit.pay2"){
                $ret["{$row['_u']}_{$row['_sec']}"]['pay2']++;
            }elseif($row['items'][0]['tag'] == "Hero.diziRecruit.pay3"){
                $ret["{$row['_u']}_{$row['_sec']}"]['pay3']++;
            }
            echo "uid:{$row['_u']},sec:{$row['_sec']},cgem:{$row['cgem']},create_t:{$row['create_t']}\n";
        }
        echo "---------------------统计-----------------\n";
        foreach($ret as $tag=>$r){
            $uin = explode("_",$tag);
            echo "uid:{$uin[0]},sec:{$uin[1]},百里:{$r['pay2']},万里:{$r['pay3']}\n";
        }
         */
        $rows = $mon->findByIndex("oplog_20121212",array('action'=>'Hero.diziRecruit','_tm'=>array('$gt'=>$begin,'$lt'=>$end),),100000,0,array(),array(),true);
        foreach($rows as $row){
            if($row['tag'] != "free1" && $row['tag'] != "pay1"){
                $ret["{$row['_u']}_{$row['_sec']}"][$row['tag']]++;
            }
        }
        echo "---------------------统计-----------------\n";
        foreach($ret as $tag=>$r){
            $uin = explode("_",$tag);
            echo "uid:{$uin[0]},sec:{$uin[1]}, 付费百里:{$r['pay2']},付费万里:{$r['pay3']},免费百里:{$r['free2']},免费万里:{$r['free3']}\n";
        }
    }

    public function action_huodong_buchang_fafang_1212(){
        $file_name = LOG_ROOT."/buchangsouls.csv";
        $buchangsouls = file($file_name);
        foreach($buchangsouls as $line){
            $infos = explode(",",$line);
            $uid = $infos[0];
            $sec = $infos[1];
            $pay3_cnt = $infos[3];
            $pay3_soul_buchang = $infos[4];
            $pay3_point_change = $infos[6];
            $pay2_cnt = $infos[7];
            $pay2_soul_buchang = $infos[8];
            $pay2_point_change = $infos[10];
            $player = new model_Player($uid,$sec);
            $activityConfigDate = model_ActivityUtil::getHeroRecruitDate();
            if($pay3_soul_buchang > 0){
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>"补发万里挑一收徒应获得的{$pay3_soul_buchang}+3个王重阳魂魄（因延迟发放奖励，补偿额外王重阳魂魄3个）。",
                );
                $awards = array(
                    array('tag'=>'111023','num'=>$pay3_soul_buchang+3),
                );
                $msg['status'] = 'award';
                $cdkey = model_Cdkey::gen($awards,"活动延迟开启补偿");
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$sec);

                $points_pay3 = $player->numberGet('reslimit',"act_dizirecruit_pay3_{$activityConfigDate}");
                if($points_pay3 == null){
                    $points_pay3 = 1000000;
                }
                $points_pay3+=$pay3_point_change;
                $player->numberPut('reslimit',"act_dizirecruit_pay3_{$activityConfigDate}",$points_pay3);
                $player->numberIncr('reslimit',"act_dizirecruit_cnt_pay3_{$activityConfigDate}",$pay3_cnt);

                echo "[$uid][$sec],补发王重阳魂魄{$awards[0]['num']}个\n";
            }
            if($pay2_soul_buchang > 0){
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>"补发百里挑一收徒应获得的{$pay2_soul_buchang}+3个一灯魂魄（因延迟发放奖励，补偿额外一灯魂魄3个）。",
                );
                $awards = array(
                    array('tag'=>'111008','num'=>$pay2_soul_buchang+3),
                );
                $msg['status'] = 'award';
                $cdkey = model_Cdkey::gen($awards,"活动延迟开启补偿");
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$sec);

                $points_pay2 = $player->numberGet('reslimit',"act_dizirecruit_pay2_{$activityConfigDate}");
                if($points_pay2 == null){
                    $points_pay2 = 700000;
                }
                $points_pay2+=$pay2_point_change;
                $player->numberPut('reslimit',"act_dizirecruit_pay2_{$activityConfigDate}",$points_pay2);
                $player->numberIncr('reslimit',"act_dizirecruit_cnt_pay2_{$activityConfigDate}",$pay2_cnt);

                echo "[$uid][$sec],补发一灯魂魄{$awards[0]['num']}个\n";
            }
            $player->commit();
        }
    }
    public function action_cleanRedis_cache(){
        $now = getApp()->now;
        $maxuid = model_LoginUser::maxuid();
        $redis = DbConfig::getRedis('cache');
        for($uid=1;$uid<=$maxuid;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('secs'=>1,));//'_at'=>1));
            $d = $login_model->doc();

            if(!is_array($d['secs'])){
                continue;
            }
            foreach($d['secs'] as $section_id=>$timestamp){
                if(!is_numeric($timestamp)){
                    echo "data error, timestamp[$timestamp] not number\n";
                    continue;
                }
                if($now - $timestamp > 86400){
                    //超过一天，删除redis中的缓存信息
                    $cache_key = "info_{$uid}_{$section_id}";
                    $ret = $redis->del($cache_key);
                    $last_login_d = date("Ymd",$timestamp);
                    if($ret){
                        echo "del cache [$section_id][$uid], $last_login_d\n";
                    }
                }
            }
        }
    }
    public function action_cleanRedis_chat(){
        return;
        //can not fix this
        $now = getApp()->now;
        $maxuid = model_LoginUser::maxuid();
        $redis = DbConfig::getRedis('chat');
        $size = 50;
        $uid = 485;
        for($uid=1;$uid<=$maxuid;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('secs'=>1,));//'_at'=>1));
            $d = $login_model->doc();

            if(!is_array($d['secs'])){
                continue;
            }
            foreach($d['secs'] as $section_id=>$timestamp){
                if(!is_numeric($timestamp)){
                    echo "data error, timestamp[$timestamp] not number\n";
                    continue;
                }
                $origin_key = "c:4:{$section_id}:{$uid}:origin";
                $operation_key = "c:4:{$section_id}:{$uid}:operation";
                $msgs = $redis->lrange($origin_key,0,$size);
                foreach($msgs as $msg){
                    if($now - $msg['time'] > 604800){
                        break;
                    }
                }
            }
        }
    }
    public function action_check_buchang(){
        $mon = getApp()->getPaymentMongoConnection();
        $rows = $mon->findByIndex("gemorder",array('source'=>'buchang'),100000,0,array(),array(),true);
        foreach($rows as $row){
            $uid = $row['_u'];
            echo "$uid,{$row['finish_t']},{$row['product_id']}\n";
            $login_model = new model_LoginUser($uid);
            $login_model->opOne('buchange_gem_t',$row['finish_t']);
            $login_model->save();
        }
    }


	/**
	 * 给黑卡用户发传书
	 */
	public function action_notice_blackcard(){
		$list = model_BlackList::getBlackListUids();
		if(empty($list)){
			echo "list empty!\n";	
			return;
		}
		foreach($list as $uid){
			$login_model = new model_LoginUser($uid);
			$login_model->get(array('secs'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }
            foreach($d['secs'] as $section_id=>$timestamp){
                $day = date('ymd',$timestamp);
                echo "uid:$uid, sec:$section_id, time:$day;\n";

				$msg1 = array(
					'type'=>'system',
					'key'=>uniqid(),
					'time'=>getApp()->now,
					'content'=>"大掌门运营团队郑重提醒：
					1、大掌门没有任何通过淘宝充值的渠道，请不要通过淘宝进行非法充值。使用非法充值将有可能造成您的帐号密码被盗取，并会出现数据异常而被永久性封停。"
				);
				$msg2 = array(
					'type'=>'system',
					'key'=>uniqid(),
					'time'=>getApp()->now,
					'content'=>"2、为了确保您的帐户安全及避免不必要的损失，请您务必只通过点击游戏内的“集市”-“充值”的正规官方渠道进行充值操作。"
				);
				model_Chat::sendMsg($msg1, $uid,'origin',$section_id);
				model_Chat::sendMsg($msg2, $uid,'origin',$section_id);
			}
		}
	}
    /**
     * 检查支付信息
     *
     */
    public function action_check_payment(){
        $mon = getApp()->getPaymentMongoConnection();
        $rows = $mon->findByIndex("gemorder",array('action'=>'recharge_gem','status'=>1),0,0,array(),array(),true);
        foreach($rows as $row){
            $uid = $row['_u'];
            $section_id = $row['_sec'];
            $time = $row['_tm'];
            $vip = $row['_vip'];
            $device_id = $row['device_id'];
            $mac_address = $row['mac_address'];
            $cash = $row['cash'];
            echo "insert into payment values($uid,'$section_id',$time,$vip,'$device_id','$mac_address',$cash);\n";
        }
    }
    public function action_export_payment(){
        $mon = getApp()->getPaymentMongoConnection();
        $rows = $mon->findByIndex("gemorder",array('action'=>'recharge_gem','status'=>1),0,0,array(),array(),true);
        foreach($rows as $row){
            $uid = $row['_u'];
            $section_id = $row['_sec'];
            $time = $row['_tm'];
            //$vip = $row['_vip'];
            //$device_id = $row['device_id'];
            //$mac_address = $row['mac_address'];
            $cash = $row['cash'];
            echo "$uid,$section_id,$time,$cash\n";
            //echo "insert into payment values($uid,'$section_id',$time,$vip,'$device_id','$mac_address',$cash);\n";
            //echo "$uid,'$section_id',$time,$vip,'$device_id','$mac_address',$cash);\n";
        }
    }
    public function action_clean_mac(){
        $uids = model_BlackList::getBlackListUids();
        foreach($uids as $uid){
            $login_model = new model_LoginUser($uid);
            $login_model->opOne('mac_address','');
            $login_model->save();
        }
    }

	public function action_change_mac(){
        $now = getApp()->now;
        $uid = $this->get_param('uid');
		$uid = (int)$uid;
        $mac = $this->get_param('mac');

		$model = new model_LoginUser($uid);
		$model->get(array('pid'));
		$pid = $model['pid'];

		$logRecharge = new model_LogRecharge($uid);
		$ret = $logRecharge->changeLogMac($mac, $uid);
		echo "uid = $uid after change:\n";
		print_r($ret);

		$login_data_db = $logRecharge->getBindInfoByUid($uid);

		$content = "申诉更换充值设备:\n
			申诉人：uid [$uid], 数据库：login_mac: [{$login_data_db['login_mac']}], payment_mac: [{$login_data_db['payment_mac']}], 更换的新mac: [$mac]\n";

		$msg1 = array(
			'type'=>'system',
			'key'=>uniqid(),
			'time'=>getApp()->now,
			'content'=>"亲爱的掌门，我们已经帮您处理了您之前提交常用设备更换申请，您可以尝试进行充值了。"
		);

		$login_model = new model_LoginUser($uid);
		$login_model->get(array('secs'=>1));
		$d = $login_model->doc();
		if(empty($d['secs'])){
			$d['secs'] = array();
		}
		
		foreach($d['secs'] as $section_id=>$timestamp){
			$day = date('ymd',$timestamp);
			echo "uid:$uid, sec:$section_id, time:$day;\n";
			model_Chat::sendMsg($msg1, $uid,'origin',$section_id);
		};

		if(count($d['secs']))
			model_Util::sendemail('wangkun@playcrab.com,kf@playcrab.com,op@playcrab.com', 'blacklist_user_apply_checked', $content);
	}
    public function action_buchang_1219(){
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        //$start = $end = 4383;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                $player = new model_Player($uid,$section_id);
                echo "==========\n";
                echo "$uid,$section_id\n";
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>"为您提供叫花鸡*3、补元丹*3，感谢您对游戏的支持！",
                );
                $awards = array(
                    array('tag'=>'601001','num'=>3),
                    array('tag'=>'601002','num'=>3),
                );
                $msg['status'] = 'award';
                echo $msg['content']."\n";
                $cdkey = model_Cdkey::gen($awards,"叫花鸡、补元丹补偿");
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$section_id);
            }
        }
    }

	//删除多余的世界boss的redis key
	public function action_del_overdate_worldboss_keys(){
		$redis = DbConfig::getRedis('worldboss');
		$keys = $redis->keys("wor*");
		for($i=0; $i<=7; $i++){
			$day = date('md', strtotime("$i days ago"));
			$reserve_days[$day] = 1;
		}
		echo "保留的日期: ";
		print_r($reserve_days);

		$redis->multi(Redis::MULTI);
		foreach($keys as $k){
			$sub_date = substr($k, -4);
			if($reserve_days[$sub_date]){
				echo "reserve_key = $k\n";
			}else{
				$redis->del($k);
			}
		}
		$redis->exec();
	}
    public function action_xuezhan_award_bufa(){
        $now = getApp()->now;
        $sec= $this->get_param('sec');//分区
		$date = $this->get_param('date');//排行的日期
        $size = $this->get_param('zhenrong');//阵容，5人阵，还是6人阵这种
        $start = $this->get_param('start');//从第start个
        if(!$start){
            $start = 0;
        }
        $rank_reward_configs = PL_Config_Numeric::get("xuezhan/xuezhanrankreward");

        $redis = DbConfig::getRedis("lunjian");
        $rank_tag = "bloodyrank_{$size}_{$date}_{$sec}";
        echo "======$rank_tag======\n";
        //默认已经手动从redis中将那几个作弊的人移除，而且默认这几人排在前几位，后面的只是顺次往前移动diff位
        $ranklist = $redis->zrevrange($rank_tag,0,19,"withscores");
        $current_place = 1;
        foreach($ranklist as $uid=>$score){
            if($current_place <= $start){
                $current_place++;
                continue;
            }
            $awards = $rank_reward_configs[$current_place]["reward_for_".$size];
            $desc_str = model_Cdkey::descriptItems($awards);
            $key = uniqid();
            echo "$uid: [$current_place]";
            $content = "血战补发奖励： $desc_str";
            echo $content."\n";
            //$now = getApp()->now;
            $msg = array(
                'key'=>$key,
                'time'=>$now,
                'content'=>$content,
                'type'=>'system',
            );
            $current_place ++;
            $msg['status'] = 'award';
            $cdkey = model_Cdkey::gen($awards,$desc_str,1,"{$rank_tag}_bufa");
            $msg['cdkey'] = $cdkey;
            model_Chat::sendMsg($msg,$uid,'origin',$sec);
            echo "\t send ok\n";
        }
    }

    public function action_fanyuanbaobug_find(){
        $app = getApp();
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        //$start = $end = 4383;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                $player = new model_Player($uid,$section_id);
                $d = $player->getFields(array('vip','evtchongzhifyb'));
                $evtchongzhifyb = $d['evtchongzhifyb'];
                if(!is_array($evtchongzhifyb)){
                    continue;
                }
                foreach($evtchongzhifyb as $chongzhitag=>$evt_data){
                    $activityConfig = $app->getactivityconfig($chongzhitag);
                    $reward_days = $evt_data['reward_days'];
                    if($reward_days == $activityConfig['rewarddays']){
                        // find it
                        echo "[{$uid}][{$section_id}],\tcash:[{$evt_data['total_cash_recharge']}],\tvip:[{$d['vip']['lvl']}]\n";
                    }
                }
            }
        }
    }

    public function action_fanyuanbao_chuanshu(){
        $app = getApp();
        $file_name = LOG_ROOT."/fanyuanbaobug.log";
        $lines = file($file_name);
        $content = "传书中是掌门参加充值返元宝活动后所有未领取的元宝，请掌门查收。";
        foreach($lines as $line){
            $line = trim($line);
            $info = explode(',',$line);
            $uid = $info[0];
            $sec = $info[1];
            $cash = $info[2];
            $chat_key = "c:4:".$sec.":".$uid.":origin";
            $msgs = model_Chat::getC($chat_key,50);
            foreach($msgs as $msg){
                if($msg['type'] != "system"){
                    continue;
                }
                if($msg['content'] == $content){
                    $cdkey = $msg['cdkey'];
                    $cdm = new model_Cdkey($cdkey);
                    $d = $cdm->get();
                    if(!$d){
                        continue;
                    }
                    foreach($d['items'] as $item){
                        if($item['tag'] == "gem"){
                            $diff_cash = $cash  - $item['num'] / 5;
                            echo "{$uid},{$sec},rece_gem:{$item['num']},cash_now:{$cash},diff_cash:{$diff_cash},reced:{$d['recv']}\n";
                        }
                    }
                }
            }
        }
    }

    public function action_fanyuanbao_reset(){
        $app = getApp();
        $file_name = LOG_ROOT."/fybfix_".P_PLATFORM.".php";
        $infos = require_once($file_name);
        $problem_items = array();
        foreach($infos as $info){
            $uid = $info['uid'];
            $sec = $info['sec'];
            $player = new model_Player($uid,$sec);
            $diff_cash= $info['diff_cash'];

            if(is_null($diff_cash)){
                $diff_cash = $info['cash'];
                $problem_items[$uid."_".$sec] = $info;
            }
            if(!$info['recv']){
                $problem_items[$uid."_".$sec] = $info;
            }

            $fanyuanbao = $player->objectGet('evtchongzhifyb','act_chongzhifanyuanbao_1');
            $curr_cash = $fanyuanbao['total_cash_recharge'];
            $diff_cash = $curr_cash  - $info['rece_gem'] / 5;
            if(isset($fanyuanbao['diff_cash'])){
                echo "[$uid][$sec],error,fix before\n";
                continue;
            }
            $fanyuanbao['error_recev_t'] = $fanyuanbao['last_receive_t'];
            $fanyuanbao['error_reward_days'] = $fanyuanbao['reward_days'];
            $fanyuanbao['reward_days'] = 0;
            $fanyuanbao['error_total_cash_recharge'] = $fanyuanbao['total_cash_recharge'];
            $fanyuanbao['diff_cash'] = $diff_cash;
            $fanyuanbao['total_cash_recharge'] = $diff_cash;
            $player->objectPut('evtchongzhifyb','act_chongzhifanyuanbao_1',$fanyuanbao);
            echo "[$uid][$sec], diff_cash:[$diff_cash]\n";
            $player->commit();
        }
        //todo
        $problems_items_file = LOG_ROOT."/problems_fyb_items.php";
        $str = array2code(null,$problem_items,0);
        $str = "<?php return $str";
        file_put_contents($problems_items_file,$str);
    }

    public function action_find_soulcnt(){
        $app = getApp();
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        //$start = $end = 4383;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array('vip','level','soul','peoples'));
                $vip = $data['vip']['lvl'];
                $level = $data['level'];
                $souls = $data['soul'];
                $peoples = $data['peoples'];
                if(is_array($souls)){
                    foreach($souls as $stag=>$snum){
                        if($snum >= 500){
                            echo "$uid,\t$section_id,\tvip:$vip,\tlevel:$level,\tstag:$stag,\tsnum:$snum\n";
                        }
                    }
                }
                if(is_array($peoples)){
                    foreach($peoples as $ptag=>$people){
                        $tupolevel = $people['tupolevel'];
                        if($tupolevel >= 10){
                            echo "$uid,\t$section_id,\tvip:$vip,\tlevel:$level,\tptag:$ptag\ttupolevel:$tupolevel\n";
                        }
                    }
                }
            }
        }
    }
    /*
     * 可以用 begin 和 end 指定开始结束时间，那么就不用再指定period参数了
     */
    public function action_import_realtime(){
/*        $section = $this->get_param('sec');
        $source = $this->get_param('src');*/
        $period = $this->get_param('period');
        $bDate = $this->get_param('begin');
        $eDate = $this->get_param('end');
        $secList = array_keys(getApp()->getSectionConfig());
        $srcList = array_keys(getApp()->getSourceConfig());
        $allList = array($secList, $srcList, array("all"));
		$login_model = new model_LoginUser(1);// 1?
        for($i = 0, $len1 = count($allList); $i < $len1; $i ++){
            $tmpList = $allList[$i];
            for($j = 0, $len2 = count($tmpList); $j < $len2; $j ++){
                $elem = $tmpList[$j];
                echo $elem."\n";
                if($i == 0){//分区
                    $ret = model_Util::get_realtime_login_stat_new($period, $elem, $bDate, $eDate);
                    $tmp = array('Section'=>array($elem=>$data));
                    $data = &$tmp['Section'][$elem];
                }else if($i == 1){//渠道
                    $ret = model_Util::get_realtime_login_stat_new($period, $elem, $bDate, $eDate);
                    $tmp = array('Source'=>array($elem=>$data));
                    $data = &$tmp['Source'][$elem];
                }else if($i == 2){//总表
                    $ret = model_Util::get_realtime_login_stat_new($period, $elem, $bDate, $eDate); 
                    $tmp = array('All'=>$data);
                    $data = &$tmp['All'];
                } 

                $datas = $ret["data"];
                foreach($datas as $day=>$vals){
                    $login_model->id($day,'realtime_stat');
                    $data = array(
                         'date'=>$vals['date']
                        ,'active_today_pid'=>$vals['active_today_pid']
                        ,'auth_today_pid'=>$vals['auth_today_pid']
                        ,'auth_yesterday_pid'=>$vals['auth_yesterday_pid']
                        ,'auth_reserve_pid'=>$vals['auth_reserve_pid']
                        ,'active_today_device'=>$vals['active_today_device']
                        ,'auth_today_device'=>$vals['auth_today_device']
                        ,'auth_yesterday_device'=>$vals['auth_yesterday_device']
                        ,'auth_reserve_device'=>$vals['auth_reserve_device']
                    );
                    echo $vals["date"]."\n";
                    var_dump($tmp);
                    $login_model->opMulti($tmp);
                    $login_model->save();
                }
            }
        }
/*
        if($section && !$source){//分区
            $ret = model_Util::get_realtime_login_stat_new($period, $section);
            $tmp = array('Section'=>array($section=>$data));
            $data = &$tmp['Section'][$section];
        }else if($source && !$section){//渠道
            $ret = model_Util::get_realtime_login_stat_new($period, $source);
            $tmp = array('Source'=>array($source=>$data));
            $data = &$tmp['Source'][$source];
        }else if(!$section && !$source){//总表
            $ret = model_Util::get_realtime_login_stat_new($period, 'all'); 
            $tmp = array('All'=>$data);
            $data = &$tmp['All'];
        } 

		$datas = $ret["data"];
        var_dump($ret);
		foreach($datas as $day=>$vals){
            $login_model->id($day,'realtime_stat');
            $data = array(
                 'date'=>$vals['date']
                ,'active_today_pid'=>$vals['active_today_pid']
                ,'auth_today_pid'=>$vals['auth_today_pid']
                ,'auth_yesterday_pid'=>$vals['auth_yesterday_pid']
                ,'auth_reserve_pid'=>$vals['auth_reserve_pid']
                ,'active_today_device'=>$vals['active_today_device']
                ,'auth_today_device'=>$vals['auth_today_device']
                ,'auth_yesterday_device'=>$vals['auth_yesterday_device']
                ,'auth_reserve_device'=>$vals['auth_reserve_device']
            );
            $login_model->opMulti($tmp);
            $login_model->save();
		}
        echo "finished...";
 */



//        var_dump($datas);
/*		$login_model->switchColl('realtime_stat');
        $ret = $login_model->getByIds(array('2013-01-08'));
        var_dump($ret);*/
//        $ret = model_Util::realtime_stat_by_sec($period, $sec);
       // echo $ret;
        //$ret = $ret["data"];//["2013-01-07"];
//        $cnt = 0;
/*        foreach ($ret as $k=>$v){
            echo $k." === ".$v; 
            echo "\n";
            $cnt ++;
}*/
//        echo $cnt;
      //  var_dump($total_user_count_pid);
/*
        $login_model = new model_LoginUser(1);
        $login_model->id('2013-01-08','realtime_stat');
        $login_model->opOne('name','owen');
        $login_model->opMulti(array('age'=>100,'xxx'=>'yyy'));
        $login_model->save();

        $login_model = new model_LoginUser(1);
        $login_model->switchColl('realtime_stat');
        $ret = $login_model->getByIds(array('2013-01-08'));
        var_dump($ret);*/
    }
    
    public function action_find_realtime(){
        $date = $this->get_param('date');
        $section = $this->get_param('sec');
        $source = $this->get_param('src');
        $login_model = new model_LoginUser(1);
        $login_model->switchColl("realtime_stat");
//        $mc = $login_model->getmc()->getmc();
//        $ret = $mc->find(array('_id'=>array('$in'=>array('2013-01-10','2013-01-11'))),array('Section.s1'=>1,'_id'=>0));
//        $ret = $mc->count();
        $ret = $login_model->getByIds(array($date));
//        $tmp = iterator_to_array($ret); 
        var_dump($ret);
    }
    public function action_test(){
        $ret = model_Util::get_realtime_login_history(102, 'All');//from mongo
        $datas = $ret["data"];
        var_dump($ret);
        $ret2 = model_Util::get_realtime_login_stat(102);//from redis
        $datas2 = $ret2["data"];
        var_dump($ret2);
        
        foreach($datas as $k=>$v){
            foreach($datas2 as $k2=>$v2){
                if($k == $k2){
                    echo $k;
                    if(
                    $v["active_today_pid"] == $v2["active_today_pid"] &&
                    $v["active_today_device"] == $v2["active_today_device"] &&
                    $v["auth_today_pid"] == $v2["auth_today_pid"] &&
                    $v["auth_today_device"] == $v2["auth_today_device"] &&
                    $v["auth_reserve_pid"] == $v2["auth_yesterday_pid"] &&
                    $v["auth_reserve_device"] == $v2["auth_yesterday_device"]){
                    echo "ok\n";
                    }else{
                    echo "error\n";
                    } 
                    break; 
                }
            }
        } 
    }
    public function action_cody(){
//        $ret = model_Util::realtime_stat_new(6,"all","All");
        $period = $this->get_param('period');
        $ret = model_Util::realtime_stat($period);
//        $today_data = model_Util::get_realtime_login_stat_new(3,"all");
//        $history_data = model_Util::get_realtime_login_history(5, "All");
//        var_dump($today_data);
//        var_dump($history_data);
         var_dump($ret);
    }
	//qq平台内测用户标记, 只有s1分区
	public function action_qqandroid_neice_mark(){
		$maxuid = model_LoginUser::maxuid();
        $start = 1;
        $end = $maxuid;
		$section_id = 's1';

        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
			$player = new model_Player($uid, $section_id);
			$data = $player->getFields(array('level'));
			$level = $data['level'];
			$login_model->opOne('max_lvl', $level);
			$login_model->save(true);
			echo "uid = $uid, level = $level\n";
        }

	}
    public function action_shendiaocheck(){
		$maxuid = model_LoginUser::maxuid();
        $start = 1;
        $end = $maxuid;
		$section_id = 's1';
        $ptag = "101028";
        $stag = "111028";

        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array('peoples'=>array($ptag),'soul','vip','total_gem_added'));
                if($data['peoples'][$ptag]){
                    echo "uid:{$uid},sec:{$section_id},vip:{$data['vip']['lvl']},total_gem_added:{$data['total_gem_added']},tupolevel:{$data['peoples'][$ptag]['tupolevel']},soul:{$data['soul'][$stag]}\n";
                    pp($data['peoples'][$ptag]);
                    echo "---------------------------------\n";
                }
                if($data['soul'][$stag] > 20){
                    echo "uid:{$uid},sec:{$section_id},vip:{$data['vip']['lvl']},total_gem_added:{$data['total_gem_added']},soul:{$data['soul'][$stag]}\n";
                }
            }
        }
    }
    public function action_remove_cache(){
		$redis = DbConfig::getRedis('cache');
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        //$start = $end = 9110;
        //$end = 100;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'secs'=>1,'_ld'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }
            $pid = $d['pid'];
            $device_id = $d['_ld']['device_id'];

            foreach($d['secs'] as $section_id=>$timestamp){
                echo "$uid user_login_time_{$section_id}_{$pid}   ". $redis->del("user_login_time_{$section_id}_{$pid}")."\n";
                echo "$uid device_set_{$section_id}_{$device_id}     " . $redis->del("device_set_{$section_id}_{$device_id}")."\n";
            }
        }
    }
    public function action_remove_chuanshu(){
		$redis = DbConfig::getRedis('chat');
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        //$start = $end = 9110;
        //$end = 100;

        $now = time();
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'secs'=>1,'_ld'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }
            $pid = $d['pid'];
            $device_id = $d['_ld']['device_id'];

            foreach($d['secs'] as $section_id=>$timestamp){
                if($now - $timestamp >= 86400*15){
                    echo "$uid, $section_id ".date("Y-m-d H:i:s",$timestamp)."\n";
                    $key = "c:4:$section_id:$uid:origin";
                    echo $key . ' ' . $redis->del($key) ."\n";
                    $key = "c:4:$section_id:$uid:operation";
                    echo $key . ' ' . $redis->del($key) ."\n";
                }
            }
        }
    }
    /*
     * 用 days_before 指定 删除多少天以前的数据
     * 用 days_count 指定一共删除多少天的数据
     */
    public function action_remove_realtime(){
        $section_config = getApp()->getSectionConfig();
        $section_ids = array_keys($section_config);
		$redis = DbConfig::getRedis('cache');
        $days_before = $this->get_param('days_before');
        $days_count = $this->get_param('days_count');
        if($days_before > 0 && $days_count > 0){
            foreach(array('pid','device') as $type){
                for($i=$days_before+$days_count-1;$i>=$days_before;$i--){
                    $today = date('ymd',strtotime("- $i days"));
                    $key = "active_{$type}_all_{$today}";
                    echo "$key\t" .$redis->del($key) ."\n";
                    $key = "auth_{$type}_all_{$today}";
                    echo "$key\t" .$redis->del($key) ."\n";
                    foreach($section_ids as $section_id){
                        $key = "active_{$type}_{$section_id}_{$today}";
                        echo "$key\t" .$redis->del($key) ."\n";
                        $key = "auth_{$type}_{$section_id}_{$today}";
                        echo "$key\t" .$redis->del($key) ."\n";
                    }
                }
            }
        }else{
            echo "need days_before > 0 and days_count >0\n";
        }
    }
    public function action_collect_daily_money(){
        $sec = $this->get_param('sec');
        $maxuid = model_LoginUser::maxuid();
        for($uid=1;$uid<=$maxuid;$uid++){
            $player = new model_Player($uid,$sec);
            $d = $player->getFields(array('level','vip','statistics'));

            $days_money_add = $d['statistics']['days_money_add'];
            if(!$days_money_add){
                //todo
                continue;
            }
            //大于10个，去除两大两小，否则一大一小
            $size = count($days_money_add);
            asort($days_money_add);
            $idx = 0;
            $sum = 0;
            $diff = 0;
            if($size > 10){
                $diff = 2;
            }elseif($size >= 3){
                $diff = 1;
            }
            foreach($days_money_add as $v){
                $idx++;
                if($idx <= $diff){
                    continue;
                }
                if($idx > $size - $diff){
                    break;
                }
                $sum += $v;
            }
            $averageMoneyGainADay = $sum/($size - 2*$diff);
            $vip = $d['vip']['lvl'];
            $level = $d['level'];
            echo "[$uid][$sec],aver:[$averageMoneyGainADay],vip:[$vip],level:[$level]\n";
        }
    }

	public function action_auto_create_blacklist(){
		if(P_PLATFORM !== 'appstore' && P_PLATFORM !== 'dev'){
			echo "platform is " . P_PLATFORM . ", only appstore is enabled\n";
			return;
		}
        $mon = getApp()->getPaymentMongoConnection();
		$mc  = $mon->getmc();
		//$mc->ensureIndex(array('_u'=>1, 'device_id'=>1));
		$data = $mc->find(array('action'=>'recharge_gem', 'status'=>1));
		$redis = DbConfig::getRedis('cache');
		$keys = $redis->keys("blacklist*");
		$redis->multi();
		foreach($keys as $k){
			$redis->del($k);
		}
		$ret = $redis->exec();
		if($ret === false){
			echo "del error\n";
			return;
		}

		foreach($data as $r){
			//print_r($r);
			$uid = $r['_u'];
			$device_id = $r['device_id'];
			$cash = $r['cash'];
			$redis->multi();
			$redis->hincrby("blacklist_sum_$uid", "recharge_count", 1);
			$redis->hincrby("blacklist_sum_$uid", "cash_sum", $cash);
			$redis->sadd("blacklist_uids", $uid);
			$redis->sadd("blacklist_dids", $device_id);
			$redis->sadd("blacklist_$uid", $device_id);
			$redis->sadd("blacklist_$device_id", $uid);
			$redis->exec();
		}

		$dids = $redis->smembers("blacklist_dids");
		$redis->multi();
		foreach($dids as $did){
			$redis->scard("blacklist_$did");
		}
		$did_counts = $redis->exec();
		$did_static = array_combine($dids, $did_counts);
		unset($did_static);
		foreach($did_static as $d=>$s){
			if($s >= 5){
				$black_list_device[$d] = 1;
				$uids_use_blackdevice = $redis->smembers("blacklist_$d");
				foreach($uids_use_blackdevice as $buid){
					$black_list_uid[$buid] = 1;
				}
			}
		}


		$uids = $redis->smembers("blacklist_uids");
		$redis->multi();
		foreach($uids as $uid){
			$redis->scard("blacklist_$uid");
		}
		$uid_counts = $redis->exec();
		$uid_static = array_combine($uids, $uid_counts);
		foreach($uid_static as $u=>$s){
			if($s >= 3){
				$black_list_uid[$u] = 1;
			}
		}

		sort($black_list_uid);
		sort($black_list_device);

		$black_list_uid_path = LOG_ROOT . "blacklist_uids.php";
		$black_list_did_path = LOG_ROOT . "blacklist_dids.php";
		echo "blacklist path = $black_list_uid_path\n";

		if(!$black_list_uid){
			$black_list_uid = array();
			echo "uid黑名单为空";
		}
		$out = var_export($black_list_uid, true);
		$out = "<?php\nreturn " .$out. ";\n?>";
		file_put_contents($black_list_uid_path, $out);

		if(!$black_list_device){
			$black_list_device = array();
			echo "设备黑名单为空";
		}
		$out = var_export($black_list_device, true);
		$out = "<?php\nreturn " .$out. ";\n?>";
		file_put_contents($black_list_did_path, $out);




		/*
		if(file_exists($black_list_uid_path)){
			$bl_uids = include($black_list_uid_path);
		}else{
			$bl_uids = array();
		}

		if(file_exists($black_list_did_path)){
			$bl_dids = include($black_list_did_path);
		}else{
			$bl_dids = array();
		}
		 */
	}
    public function action_buchang_130131(){
        $maxuid = model_LoginUser::maxuid();

        $uidinfos = array(
            'appstore'=>array('s_uid'=>58670,'s_sec'=>'s3'),
            'ios91'=>array('s_uid'=>20121,'s_sec'=>'s94'),
            'gamecomb'=>array('s_uid'=>65062,'s_sec'=>'s8'),
            'dev'=>array('s_uid'=>100,'s_sec'=>'s2'),
        );
        $start = $uidinfos[P_PLATFORM]['s_uid'];
        $start_sec = $uidinfos[P_PLATFORM]['s_sec'];
        $end = $maxuid;

        //$start = $end = 4383;
        $now = getApp()->now;
        $today_zero = strtotime(date("Ymd",$now));
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                if($uid == $start && $section_id < $start_sec){
                    continue;
                }
                if($timestamp < $today_zero){
                    continue;
                }
                $player = new model_Player($uid,$section_id);
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>$now,
                    'content'=>"大掌门官方对此次更新出现的错误表示诚挚的歉意，并提供以下补偿：【叫花鸡*3、补元丹*3，银两*100000，培养丹*100】，请在包裹内确认。感谢您对大掌门的支持。",
                );
                $awards = array(
                    array('tag'=>'601001','num'=>3),
                    array('tag'=>'601002','num'=>3),
                    array('tag'=>'money','num'=>100000),
                    array('tag'=>'601019','num'=>100),
                );
                foreach($awards as $award){
                    $player->addItem($award['tag'],$award['num']);
                }
                $msg['status'] = 'system';
                echo $msg['content']."\n";
                //$cdkey = model_Cdkey::gen($awards,"叫花鸡、补元丹补偿");
                //$msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$section_id);
                $ret = $player->commit();
                if($ret['s'] == StatusCode::ok){
                    echo "[$uid],[$section_id] {$msg['content']}\n";
                }else{
                    pp($ret);
                }
            }
        }
    }
    public function action_huodong_buchang_130131(){
        $mon = new  PL_Db_Mongo(DbConfig::getMongodb('stat'));
        $mon->switchColl('oplog_20130131');
        $begin=strtotime("2013-1-31 12:00");
        $end = strtotime("2013-1-31 16:10");
        $ret = array();
        /*
        $rows = $mon->findByIndex("gemlog",array('action'=>'consume_gem','create_t'=>array('$gt'=>$begin,'$lt'=>$end),),100000,0,array(),array(),true);
        foreach($rows as $row){
            //pp($row);
            $date = date("Ymd",$row['create_t']);
            if($row['items'][0]['tag'] == "Hero.diziRecruit.pay2"){
                $ret["{$row['_u']}_{$row['_sec']}"]['pay2']++;
            }elseif($row['items'][0]['tag'] == "Hero.diziRecruit.pay3"){
                $ret["{$row['_u']}_{$row['_sec']}"]['pay3']++;
            }
            echo "uid:{$row['_u']},sec:{$row['_sec']},cgem:{$row['cgem']},create_t:{$row['create_t']}\n";
        }
        echo "---------------------统计-----------------\n";
        foreach($ret as $tag=>$r){
            $uin = explode("_",$tag);
            echo "uid:{$uin[0]},sec:{$uin[1]},百里:{$r['pay2']},万里:{$r['pay3']}\n";
        }
         */
        $rows = $mon->findByIndex("oplog_20130131",array('action'=>'Hero.diziRecruit','_tm'=>array('$gt'=>$begin,'$lt'=>$end),),100000,0,array(),array(),true);
        foreach($rows as $row){
            if($row['tag'] != "free1" && $row['tag'] != "pay1"){
                $ret["{$row['_u']}_{$row['_sec']}"][$row['tag']]++;
            }
        }
        echo "---------------------统计-----------------\n";
        foreach($ret as $tag=>$r){
            $uin = explode("_",$tag);
            echo "uid:{$uin[0]},sec:{$uin[1]}, 付费百里:{$r['pay2']},付费万里:{$r['pay3']},免费百里:{$r['free2']},免费万里:{$r['free3']}\n";
        }
    }
    public function action_huodong_buchang_fafang_130131(){
        $file_name = LOG_ROOT."/魂魄补偿130201-QQ.csv";
        $buchangsouls = file($file_name);
        foreach($buchangsouls as $line){
            $infos = explode(",",$line);
            $uid = $infos[0];
            $sec = $infos[1];
            $pay3_cnt = $infos[3];
            $pay3_soul_buchang = $infos[4];
            $pay3_point_change = $infos[6];
            $pay2_cnt = $infos[7];
            $pay2_soul_buchang = $infos[8];
            $pay2_point_change = $infos[10];
            //$player = new model_Player($uid,$sec);
            $activityConfigDate = model_ActivityUtil::getHeroRecruitDate();
            if($pay3_soul_buchang > 0){
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>"因技术问题导致昨日活动开放时间推迟，大掌门官方对各位掌门表示歉意，并对您做出如下补偿：小昭魂魄X{$pay3_soul_buchang}，请点击领取按钮领取。",
                );
                $awards = array(
                    array('tag'=>'111037','num'=>$pay3_soul_buchang),
                );
                $msg['status'] = 'award';
                $cdkey = model_Cdkey::gen($awards,"活动延迟开启补偿");
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$sec);

                /*
                $points_pay3 = $player->numberGet('reslimit',"act_dizirecruit_pay3_{$activityConfigDate}");
                if($points_pay3 == null){
                    $points_pay3 = 1000000;
                }
                $points_pay3+=$pay3_point_change;
                $player->numberPut('reslimit',"act_dizirecruit_pay3_{$activityConfigDate}",$points_pay3);
                $player->numberIncr('reslimit',"act_dizirecruit_cnt_pay3_{$activityConfigDate}",$pay3_cnt);
                 */

                echo "[$uid][$sec],补发小昭魂魄{$awards[0]['num']}个\n";
            }
            if($pay2_soul_buchang > 0){
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>"因技术问题导致昨日活动开放时间推迟，大掌门官方对各位掌门表示歉意，并对您做出如下补偿：邀月魂魄X{$pay2_soul_buchang}，请点击领取按钮领取。",
                );
                $awards = array(
                    array('tag'=>'111022','num'=>$pay2_soul_buchang),
                );
                $msg['status'] = 'award';
                $cdkey = model_Cdkey::gen($awards,"活动延迟开启补偿");
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$sec);

                /*
                $points_pay2 = $player->numberGet('reslimit',"act_dizirecruit_pay2_{$activityConfigDate}");
                if($points_pay2 == null){
                    $points_pay2 = 700000;
                }
                $points_pay2+=$pay2_point_change;
                $player->numberPut('reslimit',"act_dizirecruit_pay2_{$activityConfigDate}",$points_pay2);
                $player->numberIncr('reslimit',"act_dizirecruit_cnt_pay2_{$activityConfigDate}",$pay2_cnt);

                 */
                echo "[$uid][$sec],补发邀月魂魄{$awards[0]['num']}个\n";
            }
            //$player->commit();
        }
    }

    public function action_app_new_year_activity(){
        $userlist_file = LOG_ROOT."/appactivity130206.log";
        if(!file_exists($userlist_file)){
            echo "$userlist_file not exists";
            return;
        }
        $userlist = file($userlist_file);
        $awards = array(
            array('tag'=>'601019','num'=>200),
        );
        foreach($userlist as $user_line){
            $user_line = rtrim($user_line,"\n");
            $userinfo = explode(',',$user_line);
            $uid = $userinfo[1];
            $sec = "s".$userinfo[0];
            echo "uid:$uid, sec:$sec, ";

            $msg = array(
                'type'=>'system',
                'key'=>uniqid(),
                'time'=>getApp()->now,
                'content'=>"感谢您参与《大掌门》AppStore专属活动之——评论有礼！活动，并恭喜您获得活动奖励：培养丹*200。感谢您的支持，祝您游戏愉快！",
            );
            $awards = array(
                array('tag'=>'601019','num'=>200),
            );
            $desc = model_Cdkey::descriptItems($awards);
            echo "$desc\n";
            $msg['status'] = 'award';
            $cdkey = model_Cdkey::gen($awards,"app服评论活动");
            $msg['cdkey'] = $cdkey;
            model_Chat::sendMsg($msg,$uid,'origin',$sec);
        }
    }

    public function action_ios91_buchang_130207(){
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        $valid_start = strtotime("20130207");
        $content = "因春节期间服务器出现异常，对掌门造成了不便请见谅，特此补偿叫花鸡x2，补元丹x2，培养丹x50，银两100000。";

        //$start = $end = 8;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                if($timestamp < $valid_start){
                    continue;
                }
                $player = new model_Player($uid,$section_id);
                echo "$uid,$section_id:  ";
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>$content,
                );
                $awards = array(
                    array('tag'=>'601001','num'=>2),
                    array('tag'=>'601002','num'=>2),
                    array('tag'=>'money','num'=>100000),
                    array('tag'=>'601019','num'=>50),
                );
                $desc = model_Cdkey::descriptItems($awards);
                echo $desc."\n";
                $msg['status'] = 'award';
                $cdkey = model_Cdkey::gen($awards,"ios91服务器补偿:".$desc);
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$section_id);
            }
        }
    }

    public function action_zhenqi_log_analysis(){
        $mon = new  PL_Db_Mongo(DbConfig::getMongodb('log'));
        //pugai from 2013 02 08.......
        $mon->switchColl('oplog_20130208');

        // search method
        $method = "Zhenqi.refresh";
        $cond = array(
            'action'=>$method,
            '_sec'=>'s1',
        );
        $logs = $mon->findByIndex("oplog_20130208",$cond,0,0,array(),array(),true);
        $stat = array();
        foreach($logs as $log){
            $stat[$log['_u']]['uid'] = $log['_u'];
            if($stat[$log['_u']]['vip'] < $log['_vip']){
                $stat[$log['_u']]['vip'] = $log['_vip'];
            }
            if($stat[$log['_u']]['level'] < $log['_lvl']){
                $stat[$log['_u']]['level'] = $log['_lvl'];
            }
            if($stat[$log['_u']]['money'] = $log['datachange']['money']){
                $stat[$log['_u']]['_u'] = $log['datachange']['money'];
            }
            $stat[$log['_u']]['total_times']++;
            $stat[$log['_u']]['money_cost'] += $log['cost']['money'];
            if($log['extra']['poolStatus']){
                $stat[$log['_u']]['low_times']++;
            }
            if($log['extra']['free_3']){
                $stat[$log['_u']]['free_3_times']++;
            }
            $stat[$log['_u']]["mood_".$log['cur_mood']]++;
            $stat[$log['_u']]['_u'] = $log['_u'];
            $gain= $log['extra']['gain'];
            foreach($gain as $gain_tag=>$gain_num){
                break;
            }
            if($gain_tag == "601101"){
                $stat[$log['_u']]['zhenyuan_cnt']++;
            }else{
                $zhenqi_config = PL_Config_Numeric::get("item",$gain_tag);
                $stat[$log['_u']]["zhenqi_".$zhenqi_config['quality'].'_cnt']++;
            }
        }
        foreach($stat as $uid=>$info){
            echo "$uid\t{$info['vip']}\t{$info['level']}\t{$info['money']}\t{$info['total_times']}\t{$info['money_cost']}\t{$info['low_times']}\t{$info['mood_1']}\t{$info['mood_2']}\t{$info['mood_3']}\t{$info['mood_4']}\t{$info['mood_5']}\t{$info['zhenqi_0_cnt']}\t{$info['zhenqi_1_cnt']}\t{$info['zhenqi_2_cnt']}\t{$info['zhenqi_3_cnt']}\t{$info['zhenqi_4_cnt']}\t{$info['zhenyuan_cnt']}\t{$info['free_3_times']}\n";
        }
    }

    /**
     * 仅限昨天或者今天
     */
    public function action_buchang_daylogin(){
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        $valid_start = strtotime("20130225");
        $content = "由于25日服务器临时维护对部分当日进行游戏的玩家造成了不便，对此大掌门官方表示歉意，并对当日所有登陆过游戏的玩家进行如下补偿：叫花鸡x4，补元丹x4，培养丹x50，银两10万。请点击领取按钮获得补偿。";

        $awards = array(
            array('tag'=>'601001','num'=>4),
            array('tag'=>'601002','num'=>4),
            array('tag'=>'money','num'=>100000),
            array('tag'=>'601019','num'=>50),
        );
        //$start = $end = 8;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                if($timestamp < $valid_start){
                    continue;
                }
                $player = new model_Player($uid,$section_id);
                if(date("Ymd",$timestamp) == "20130226"){
                    $cdlogin = $player->numberGet('_ll','cd');
                    if($cdlogin < 2){
                        //今天登录过，昨天没有登录
                        continue;
                    }
                }
                echo "$uid,$section_id:  ";
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>$content,
                );
                $desc = model_Cdkey::descriptItems($awards);
                echo $desc."\n";
                $msg['status'] = 'award';
                $cdkey = model_Cdkey::gen($awards,"qq服务器补偿:".$desc);
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$section_id);
            }
        }
    }
    public function get_and_print_user_info($login_model){
        $login_model->get(array('pid'=>1,'email'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
        $uid = $login_model->id();
        $pid = $login_model['pid'];
        $email = $login_model['email'];
        $create_t = $login_model['_ct'];
        $create_day = date("Y-m-d",$create_t);

        if(empty($login_model['secs'])){
            $login_model['secs'] = array();
        }
        echo <<<XXX
============================================
uid:$uid
pid: $pid
邮箱: $email
注册时间: $create_day

XXX;
        foreach($login_model['secs'] as $section_id=>$timestamp){
            $day = date('Y-m-d',$timestamp);
            $player = new model_Player($uid,$section_id);
            $data = $player->getFields(array(
                'name',
                'vip',
                'level',
            ));
            echo <<<XXX
    =================
    分区: $section_id
        上次登录时间: $day
        门派名: {$data['name']}
        等级: {$data['level']}
        VIP: {$data['vip']['lvl']}

XXX;
        }
        echo "\n";
    }
    public function action_reset_account(){
        $uid = $this->get_param('uid');
        $email = $this->get_param('email');
        $password = $this->get_param('password');
        $login_model1 = new model_LoginUser($uid);
        if(!$login_model1){
            echo "用户[uid:$uid]不存在\n";
            return;
        }
        $this->get_and_print_user_info($login_model1);
        $login_model2 = model_LoginUser::searchUniq('email',$email,true);
        if(!$login_model2){
            echo "=============================================\n";
            echo "用户[email:$email]不存在\n";
        }else{
            if($login_model2->id() == $login_model1->id()){
                echo "不需要绑定\n";
                return;
            }
            $this->get_and_print_user_info($login_model2);
        }

        if(!empty($password)){
            if($login_model2){
                echo "先禁用掉 原来 [$email] 映射的用户\n";
                $login_model2->opOne('email','__disabled__'.$email);
                $login_model2->save();
            }
            echo "绑定 uid[$uid] email[$email] password[$password]\n";
            $login_model1->setPass($password);
            $login_model1->opOne('email',$email);
            $login_model1->save();
        }
    }
    public function action_buchang_0307(){
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        $valid_start = strtotime("20130307");
        $content = "由于3月7日游戏更新出现问题，对部分当日进行游戏的玩家造成了不便，对此大掌门官方表示歉意，并对当日所有登陆过游戏的玩家进行如下补偿：叫花鸡x4，补元丹x4，培养丹x100，银两20万。请点击领取按钮获得补偿。";

        $awards = array(
            array('tag'=>'601001','num'=>4),
            array('tag'=>'601002','num'=>4),
            array('tag'=>'money','num'=>200000),
            array('tag'=>'601019','num'=>100),
        );
        //$start = $end = 8;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                if(!is_numeric($timestamp)){
                    continue;
                }
                if($timestamp < $valid_start){
                    continue;
                }
                $player = new model_Player($uid,$section_id);
                if(date("Ymd",$timestamp) == "20130308"){
                    $cdlogin = $player->numberGet('_ll','cd');
                    if($cdlogin < 2){
                        //今天登录过，昨天没有登录
                        continue;
                    }
                }
                echo "$uid,$section_id:  ";
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>$content,
                );
                $desc = model_Cdkey::descriptItems($awards);
                echo $desc."\n";
                $msg['status'] = 'award';
                $cdkey = model_Cdkey::gen($awards,"更新故障补偿:".$desc);
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$section_id);
            }
        }
    }

    public function action_qq_bufaxuezhan(){
        $now = getApp()->now;
        $list_path = LOG_ROOT."/qq_list_xuezhan.log";
        if(!file_exists($list_path)){
            echo "file not exists\n\t";
            echo $list_path;
        }
        $zhenrong_hash = array(
            '5'=>"五人阵",
            '6'=>"六人阵",
            '7'=>"七人阵",
            '8'=>"八人阵",
        );
        if(P_PLATFORM == "kunlun"){
            $zhenrong_hash = array(
                '5'=>"五人陣",
                '6'=>"六人陣",
                '7'=>"七人陣",
                '8'=>"八人陣",
            );
        }
        $lines = file($list_path);
        $rank_reward_configs = PL_Config_Numeric::get("xuezhan/xuezhanrankreward");
        $xuezhan_chenghao = PL_Config_Numeric::get("chenghaosetting","xuezhan_rank");
        $redis = DbConfig::getRedis("lunjian");
        foreach($lines as $line){
            $line = rtrim($line,"\n");
            $userinfo = explode("_",$line);
            //print_r($userinfo);
            $size = $userinfo[0];
            $date = $userinfo[1];
            $sec = $userinfo[2];
            $uid = $userinfo[3];
            $uid = rtrim($uid);
            $rank_tag = "bloodyrank_{$size}_{$date}_{$sec}";
            $current_place = $redis->zrevrank($rank_tag,$uid);
            if($current_place === false){
                echo "not find {$uid} in {$rank_tag}\n";
                continue;
            }
            $current_place++;
            try{
                $player = new model_Player($uid,$sec);
                $battleinfo = $player->objectGet('base','bloodybattle');
                if(!isset($battleinfo['historyinfo']['last_rank_d'])){
                    $last_rank_d = date("Ymd",$battleinfo['historyinfo']['start_t']);
                }else{
                    $last_rank_d = $battleinfo['historyinfo']['last_rank_d'];
                }
                $days = (strtotime($last_day)-strtotime($last_rank_d))/86400;
                $battleinfo['historyinfo']['fighting_days'] = $days;
                $battleinfo['historyinfo']['last_rank_d'] = $last_day;
                if($days == 1){
                    $battleinfo['historyinfo']['continus_rank_days']++;
                }else{
                    $battleinfo['historyinfo']['continus_rank_days'] = 0;
                }
                $battleinfo['historyinfo']['last_rank_d'] = $last_day;
                //$player->objectPut('bloodybattle','historyinfo',$battleinfo['historyinfo']);

                //todo add xuezhan rank chenghao, with time
                foreach($xuezhan_chenghao as $xuezhan_rank_chenghao){
                    if($current_place <= $xuezhan_rank_chenghao['rank']){
                        break;
                    }
                }
                $chenghao = array(
                    'tag'=>$xuezhan_rank_chenghao['chenghaotag'],
                    'level'=>1,
                    'create_t'=>strtotime("2013-3-8 10:0:0"),
                );
                $player->objectPut("chenghao",$chenghao['tag'],$chenghao);

                $player->commit();
                $awards = $rank_reward_configs[$current_place]["reward_for_".$size];
                $desc_str = model_Cdkey::descriptItems($awards);
                $key = uniqid();
                echo "$uid: ";
                $zhenrongname = $zhenrong_hash[$size];
                $content = "恭喜掌门在昨日守卫襄阳中表现神勇，闯入{$zhenrongname}排行榜，位列第{$current_place}名，特发奖励： $desc_str";
                if(P_PLATFORM == "kunlun"){
                    $content = "恭喜掌門在昨日守衛襄陽中表現神勇，闖入{$zhenrongname}排行榜，位列第{$current_place}名，特發獎勵： $desc_str";
                }
                echo $content."\n";
                //$now = getApp()->now;
                $msg = array(
                    'key'=>$key,
                    'time'=>$now,
                    'content'=>$content,
                    'type'=>'system',
                );
                $msg['status'] = 'award';
                //$cdkey = model_Cdkey::gen($awards,$desc_str,1,"bloodyrank_{$last_day}_{$sec}");
                $msg['cdkey'] = $cdkey;
                //model_Chat::sendMsg($msg,$player->uid,'origin',$sec);
            }catch(Exception $excep){
                $ex_msg = $excep->getMessage();
                $ex_trace_msg = $excep->getTraceAsString();
                $excep_content = "{$ex_msg}\n{$ex_trace_msg}";
                $subject = "血战发放出错_".P_PLATFORM."_".$rank_tag."_".$uid;
                model_Util::sendemail('op@playcrab.com,yewei@playcrab.com,kf@playcrab.com',$subject,$content);
            }
        }
    }
    public function action_buchang_0308_kunlun(){
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        $valid_start = strtotime("20130308");
        //$content = "由于3月8日服务器临时维护对部分当日进行游戏的玩家造成了不便，对此大掌门官方表示歉意，并对当日所有登陆过游戏的玩家进行如下补偿：叫花鸡x2，补元丹x2，培养丹x50，银两10万。请点击领取按钮获得补偿。";
        $content = "由於3月8日服務器臨時維護對部份當日進行遊戲的玩家造成了不變，對此大掌門官方表示歉意，並對當日所有登錄過遊戲的玩家進行如下補償：叫花雞x2，補元丹x2，培養丹x50，銀兩10萬。請點擊領取按鈕獲得補償。";

        $awards = array(
            array('tag'=>'601001','num'=>2),
            array('tag'=>'601002','num'=>2),
            array('tag'=>'money','num'=>100000),
            array('tag'=>'601019','num'=>50),
        );
        //$start = $end = 8;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                if(!is_numeric($timestamp)){
                    continue;
                }
                if($timestamp < $valid_start){
                    continue;
                }
                $player = new model_Player($uid,$section_id);
                /*if(date("Ymd",$timestamp) == "20130226"){
                    $cdlogin = $player->numberGet('_ll','cd');
                    if($cdlogin < 2){
                        //今天登录过，昨天没有登录
                        continue;
                    }
                }
                 */
                echo "$uid,$section_id:  ";
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>$content,
                );
                $desc = model_Cdkey::descriptItems($awards);
                echo $desc."\n";
                $msg['status'] = 'award';
                $cdkey = model_Cdkey::gen($awards,"kunlun服务器补偿:".$desc);
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$section_id);
            }
        }
    }
    public function action_check_pid(){

        $maxuid = model_LoginUser::maxuid();
        $tmpArr = array();
        $mon = getApp()->getPaymentMongoConnection();

        for($uid=1;$uid<$maxuid;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ct'=>1));
            $pid = $login_model['pid'];
            $low_pid = strtolower($pid);

            /*
            $cond = array('status'=>StatusCode::payment_finished,'action'=>'recharge_gem','_u'=>$uid,'source'=>array('$ne'=>'internal'),'istest'=>array('$ne'=>1));
            $rows = $mon->find($cond);
            $uid_cash = 0;
            foreach($rows as $row){
                $uid_cash += $row['cash'];
            }

            echo "$pid,$uid,$uid_cash\n";

            if(isset($tmpArr["$low_pid"])){
                //echo "duplicate,".$pid.",".$uid.",".$tmpArr["$low_pid"]."\n";
                echo "duplicate,$pid,$uid,$uid_cash,{$tmpArr["$low_pid"][0]},{$tmpArr["$low_pid"][1]},{$tmpArr["$low_pid"][2]}\n";
            }else{
                $tmpArr["$low_pid"] = array($uid,$pid,$uid_cash);
            }
            */
        }
    }
    public function action_tolower_pid(){
        $maxuid = model_LoginUser::maxuid();
        $section_id = 's517001';
        $conditions = array();
        $tmpArr = array();

        $run = true;

        for($uid=1;$uid<$maxuid;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ct'=>1));
            $pid = $login_model['pid'];
            $low_pid = strtolower($pid);
            if($pid == $low_pid){
                $conditions['all_lower'] +=1;
                continue;
            }

            $low_login_model = model_LoginUser::searchUniq('pid',$low_pid,true);

            if($low_login_model){//duplicate
                $low_uid = $low_login_model->id();


                $player = new model_Player($uid,$section_id);
                $player_data = $player->getFields(array('total_gem_added','level'));

                $low_player = new model_Player($low_uid,$section_id);
                $low_player_data = $low_player->getFields(array('total_gem_added','level'));

                $keep_low = true;
                $manual = false;

                echo "duplicate;$pid,$uid,{$player_data['total_gem_added']},{$player_data['level']};$low_pid,$low_uid,{$low_player_data['total_gem_added']},{$low_player_data['level']}\n";

                if($low_player_data['total_gem_added'] > 0 
                    && $player_data['total_gem_added'] == 0){
                    // 保留 low_player_data
                    $keep_low = true;
                    $conditions['low_pid_added_gem'] += 1;


                }else if($low_player_data['total_gem_added'] == 0 
                        && $player_data['total_gem_added'] >0){
                    // 保留 player_data
                    $keep_low = false;
                    $conditions['pid_added_gem'] += 1;
                }else if($low_player_data['total_gem_added'] > 0 
                        && $player_data['total_gem_added'] >0){
                    // 都有充值
                            // 手动处理
                    $manual = true;
                    $conditions['both_pid_added_gem'] += 1;

                    echo "both_pid_added_gem, $low_uid, $uid \n";
                }else{
                    // 都没充值
                    if($low_player_data['level']< $player_data['level']){
                        // 保留 player_data
                        $conditions['pid_level'] += 1;
                        $keep_low = false;
                    }else{
                        // 保留 low_player_data
                        $conditions['low_pid_level'] += 1;
                        $keep_low = true;
                    }
                }
                if($manual == false){
                   if($keep_low){
                       $new_pid = $low_pid .'_'.$uid;
                       echo "dup2, $pid -> $new_pid \n";
                       $login_model->opOne('pid',$new_pid);
                       $login_model->save();
                   }else{
                       $new_low_pid = $low_pid .'_'.$low_uid;
                       echo "dup, $pid -> $low_pid ; $low_pid -> $new_low_pid\n";
                       if($run){
                           $low_login_model->opOne('pid',$new_low_pid);
                           $low_login_model->save();

                           $login_model->opOne('pid',$low_pid);
                           $login_model->save();
                       }
                   }
                }
            }else{
                $conditions['unique_user'] += 1;
                echo "OK, $uid, $pid -> $low_pid\n";
                if($run){
                    $login_model->opOne('pid',$low_pid);
                    $login_model->save();
                }
            }
        }
        var_dump($conditions);
        echo "maxuid: $maxuid\n";
    }
    public function action_fix_qq_magic_bug(){
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }
            if(!$d['_ld']['user_info']['magic']['gamevip']){
                //continue;
            }
            foreach($d['secs'] as $section_id=>$timestamp){
                if(!is_numeric($timestamp)){
                    continue;
                }
                if($timestamp < $valid_start){
                    continue;
                }
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array('equipments','peoples','bag'));
                $equipments = $data['equipments'];
                $peoples = $data['peoples'];
                $cnt = 0;
                $need_commit = false;
                $magic_tag = "602060";
                if(is_array($equipments)){
                    foreach($equipments as $tag=>$info){
                        if($info['tag'] == '234012'){
                            $need_commit = true;
                            $player->numberPut('base','qq_magic_gift_recv',1);
                            $cnt++;
                            if($cnt > 1){
                                foreach($peoples as $ptag=>$people){
                                    if($people['equip']['p3'] == $tag){
                                        $people['equip']['p3'] == "";
                                        $player->objectPut('peoples',$ptag,$people);
                                    }
                                }
                                $player->objectRemove('equipments',$tag);
                            }
                        }
                    }
                }
                $cnt += $data['bag'][$magic_tag];
                if($need_commit && $data['bag'][$magic_tag] > 0){
                    $player->numberPut('bag',$magic_tag,0);
                }elseif(!$need_commit && $data['bag'][$magic_tag] > 1){
                    $player->numberPut('bag',$magic_tag,1);
                    $player->numberPut('base','qq_magic_gift_recv',1);
                    $need_commit = true;
                }elseif($need_commit){
                }
                if($cnt > 1){
                    $peiyangdan_num = $player->numberGet('bag','601019');
                    $peiyangdan_num -= $cnt * 50;
                    if($peiyangdan_num < 0){
                        $peiyangdan_num = 0;
                    }
                    $player->numberPut('bag','601019',$peiyangdan_num);
                }
                if($need_commit){
                    $player->commit();
                    echo "{$uid},{$section_id}, $cnt\n";
                }
            }
        }
    }
    public function action_kunlun_buchang0313(){
        if(P_PLATFORM != "kunlun"){
            echo "not in kunlun\n";
            return;
        }
        $maxuid = model_LoginUser::maxuid();

        $start = 1;
        $end = $maxuid;

        $content = "各位掌門，由於12日下午Google頁面維護問題，決定給大家進行補償，補償內容：叫花雞*1、銀幣*8888、元寶*50";

        $awards = array(
            array('tag'=>'601001','num'=>1),
            array('tag'=>'money','num'=>8888),
            array('tag'=>'gem','num'=>50),
        );
        //$start = $end = 8;
        
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                if(!is_numeric($timestamp)){
                    continue;
                }
                $player = new model_Player($uid,$section_id);
                echo "$uid,$section_id:  ";
                $msg = array(
                    'type'=>'system',
                    'key'=>uniqid(),
                    'time'=>getApp()->now,
                    'content'=>$content,
                );
                $desc = model_Cdkey::descriptItems($awards);
                echo $desc."\n";
                $msg['status'] = 'award';
                $cdkey = model_Cdkey::gen($awards,"kunlun服务器补偿:".$desc);
                $msg['cdkey'] = $cdkey;
                model_Chat::sendMsg($msg,$uid,'origin',$section_id);
            }
        }
    }

    public function action_findvip13(){
        $maxuid = model_LoginUser::maxuid();
        $start = 1;
        $end = $maxuid;
        $time_valid = strtotime("2013-3-14 18:00:00");
        for($uid=$start;$uid<=$end;$uid++){
            $login_model = new model_LoginUser($uid);
            $login_model->get(array('pid'=>1,'_ld'=>1,'secs'=>1,'_ct'=>1,'_at'=>1));
            $d = $login_model->doc();
            if(empty($d['secs'])){
                $d['secs'] = array();
            }

            foreach($d['secs'] as $section_id=>$timestamp){
                if(!is_numeric($timestamp)){
                    continue;
                }
                if($timestamp < strtotime("2013-3-13")){
                    continue;
                }
                $player = new model_Player($uid,$section_id);
                $data = $player->getFields(array('buylimit.602013'));
                if(isset($data['buylimit']['602013']['last_t'])){
                    $buy_time = $data['buylimit']['602013']['last_t'];
                    if($buy_time){ //&& $buy_time < $time_valid)
                        $buy_date = date("Y/m/d H:i:s",$buy_time);
                        echo "$uid,$section_id, buy @{$buy_time}, {$buy_date}\n";
                    }
                }
            }
        }
    }

	public function action_buchang_worldboss(){
        $section = $this->get_param('sec');
        $today   = $this->get_param('date');//指定日期，格式：1030，代表十月30号
		if(empty($section)){
			$section_list = array_keys(getApp()->getSectionConfig());
		}else{
			$section_list = (array)$section;
		}
		if(empty($section_list)){
			throw new Exception('section error');
			return;
		}
		$now = getApp()->now;
        $redis = DbConfig::getRedis('worldboss');
		$redis_set = DbConfig::getRedis('cache');
		if(empty($today)){
			$today = date('md', $now);
		}
		if(P_PLATFORM == "kunlun" || P_PLATFORM == 'qqandroid'){
			echo "昆仑平台暂无补偿";
			return;
		}
		$world_boss_conf = PL_Config_Numeric::get('worldboss');
		$worldboss_zhidian_offset = PL_Config_Numeric::get('setting','worldboss_zhidian_level_offset');
		echo "================[ 补偿日期 : $today ]===============\n";
		foreach($section_list as $section){
			echo "===== 分区： $section =====\n";
			foreach($world_boss_conf as $tag => $conf){
			echo "===== boss： $tag =====\n";

				$activityConfig = getApp()->getactivityconfig("act_worldboss_$tag");
				if($activityConfig){
					if($now < $activityConfig['start_t'] || $now > $activityConfig['end_t']){
						echo "[$tag] 不在活动时间内\n";
						continue;
					}
				}

				$boss_key = "worldboss_boss_{$tag}_{$section}_{$today}";
				$boss_info = $redis->hgetall($boss_key);
                    
                if($boss_info['buchang_reward_time'] ){
					$msg = "补偿时间 : ". date('Y-m-d H:i:s', $boss_info['buchang_reward_time']) . "\n";
                    echo $msg . "\n";
                    continue;
                }

				$rank_key = "worldboss_rank_{$tag}_{$section}_{$today}";

				$boss_name = PL_Config_Numeric::get('translate', $conf['bossname']);
				$boss_name = $boss_name['zh_CN'];

				$rank_list = $redis->zrevrange($rank_key, 0, -1);
				if(!$rank_list){
					continue;
				}
				$rank_uids = array_values($rank_list);
				$user_info = model_CacheUtil::getUserInfoByIdsWithFileds($rank_uids, $section, array('level'));

				foreach($user_info as $r_uid => $r_udata){
					$rank_awards = array(
						array('tag'=>'601001', 'num'=>4),//叫花鸡
						array('tag'=>'601002', 'num'=>4),//补元丹
						array('tag'=>'601019', 'num'=>200),//培养丹
						array('tag'=>'money',  'num'=>500000),//
						array('tag'=>'qiyu_zhidian','level'=>max(1, $r_udata['level']*3+$worldboss_zhidian_offset), 'num'=>1),
						array('tag'=>'qiyu_zhidian','level'=>max(1, $r_udata['level']*3+$worldboss_zhidian_offset), 'num'=>1),
						array('tag'=>'qiyu_zhidian','level'=>max(1, $r_udata['level']*3+$worldboss_zhidian_offset), 'num'=>1),
						array('tag'=>'qiyu_zhidian','level'=>max(1, $r_udata['level']*3+$worldboss_zhidian_offset), 'num'=>1),
						array('tag'=>'qiyu_zhidian','level'=>max(1, $r_udata['level']*3+$worldboss_zhidian_offset), 'num'=>1),
					);
					$desc_str = model_Cdkey::descriptItems($rank_awards);
					$rank_msg = array(
						'type'=>'system',
						'key'=>uniqid(),
						'time'=>getApp()->now,
						'content'=>"由于3月15日掌门参加群雄破阵时出现了游戏意外退出的情况。大掌门团队对此表示歉意并补偿给掌门：叫花鸡x4, 补元丹x4, 培养丹x200, 银两x500000, 指点x5",
					);
					$rank_msg['status'] = 'award';
					//print_r($rank_awards);
					$cdkey = model_Cdkey::gen($rank_awards,$desc_str);
					$rank_msg['cdkey'] = $cdkey;
					model_Chat::sendMsg($rank_msg, $r_uid,'origin',$section);
					echo "uid = [$r_uid], 获取补偿，cdkey = [$cdkey]\n";
				}

				$redis->hset($boss_key, 'buchang_reward_time', $now);
			}
		}
	}
	
		/**
	 * 奖励昆仑1、2、3区 3月17日23：59：59前进入的玩家，补元丹*3、叫花雞*3，銀幣*188888、培養丹*30
	 */
	public function action_award_kun_lun_0317(){
		
		
		if (P_PLATFORM != "kunlun") {
			echo "not in kunlun\n";
			return;
		}
		
		$maxuid = model_LoginUser::maxuid();
		$award_secs = array('s517001','s517002','s517003');
		$award_end_time = strtotime('2013-03-17 23:59:59');
		
		$start = 1;
		$end = $maxuid;

		$content = "各位掌門，你們好！非常感謝大家對大掌門遊戲的熱愛與支持，週日的登錄人數已經完全超過80000人了。".
				"爲了慶祝，特此對全服玩家發放：补元丹*3、叫花雞*3，銀幣*188888、培養丹*30。".
				"請大家查收，祝大家遊戲愉快。";

		$awards = array(
			array('tag' => '601002', 'num' => 3),
			array('tag' => '601001', 'num' => 3),
			array('tag' => 'money', 'num' => 188888),
			array('tag' => '601019', 'num' => 30),
		);
		
		 for ($uid = $start; $uid <= $end; $uid++) {
			$login_model = new model_LoginUser($uid);
			$login_model->get(array('pid' => 1, '_ld' => 1, 'secs' => 1, '_ct' => 1, '_at' => 1));
			$d = $login_model->doc();
			if (empty($d['secs'])) {
				$d['secs'] = array();
			}
			
			foreach ($d['secs'] as $section_id => $timestamp) {
				if (!is_numeric($timestamp)) {
					continue;
				}
				
				if(!in_array($section_id, $award_secs)){
					continue ;
				}
				
				$player = new model_Player($uid, $section_id);
				$player_fields = $player->getFields(array("_it"));
				$_it = $player_fields['_it'];
				
				if($_it > $award_end_time){
					continue ;
				}
				
				echo "$uid,_it: $_it, $section_id: ";
				
				$msg = array(
					'type' => 'system',
					'key' => uniqid(),
					'time' => getApp()->now,
					'content' => $content,
				);
				$desc = model_Cdkey::descriptItems($awards);
				echo $desc . "\n";
				$msg['status'] = 'award';
				$cdkey = model_Cdkey::gen($awards, "kunlun服务器奖励:" . $desc);
				$msg['cdkey'] = $cdkey;
				model_Chat::sendMsg($msg, $uid, 'origin', $section_id);
			}
		}
		
		
	}

	public function action_buchang_qq_0320(){
		$section_list = array_keys(getApp()->getSectionConfig());
		if(empty($section_list)){
			throw new Exception('section error');
			return;
		}
		$now = getApp()->now;
		if(P_PLATFORM !== 'qqandroid' && P_PLATFORM !== 'dev'){
			echo "非qq平台";
			return;
		}
		$rank_awards = array(
			array('tag'=>'601001', 'num'=>2),//叫花鸡
			array('tag'=>'601002', 'num'=>2),//补元丹
			array('tag'=>'601019', 'num'=>30),//培养丹
			array('tag'=>'money',  'num'=>100000),//
		);
		$desc_str = model_Cdkey::descriptItems($rank_awards);
		$maxuid = model_LoginUser::maxuid();

		$start = 1;
		$end = $maxuid;

		$rank_msg = array(
			'type'=>'system',
			'time'=>$now,
			'status'=>'award',
			'content'=>"3月20日服务器临时维护, 对您造成的不便请您谅解. 特此补偿: 叫花鸡x2, 补元丹x2, 培养丹x30, 银两x100000",
		);

		for($uid = $start; $uid <= $end; $uid++) {
			$login_model = new model_LoginUser($uid);
			$login_model->get(array('secs' => 1));
			$d = $login_model->doc();
			if(empty($d['secs'])){
				continue;
			}
			foreach ($d['secs'] as $section_id => $timestamp) {
				if (!is_numeric($timestamp)) {
					continue;
				}

				$d_day = date('md', $timestamp);
				if($d_day != date('md', $now)){
					continue;
				}
				$rank_msg['key'] = uniqid();
				$cdkey = model_Cdkey::gen($rank_awards, $desc_str);
				$rank_msg['cdkey'] = $cdkey;
				model_Chat::sendMsg($rank_msg, $uid, 'origin', $section_id);
				echo "uid = [$uid]; section = [$section_id]; 登陆时间 = [$d_day]; 获取补偿; cdkey = [$cdkey]\n";
			}
		}
	}
	
	
		/**
	 * 昆仑平台给03月23日00:00至03月25日23:59有过登陆行为的玩家发奖励
	 * 掌門貼*3、叫花雞*2，銀幣*188888、普通傳功丹*3
	 * @return type
	 * @throws Exception 
	 */
	public function action_general_buchang(){

		$log_name = LOG_ROOT . "/recharge.log";

		if (!file_exists($log_name)) {
			echo "file not exists! log path:" . $log_name;
			exit;
		}

		$file_handle = fopen($log_name, "r");
		$buchang_list = array();
		$i = 0;

		while (!feof($file_handle)) {

			$line = fgets($file_handle);
			$line_arr = json_decode($line);
			if (empty($line_arr->_id)) {

				continue;
			}
			$buchang_list[$i]['_id'] = $line_arr->_id;
			$buchang_list[$i]['addgem'] = $line_arr->first_recharge_gem->recharge_info->addgem;
			$buchang_list[$i]['gemaward'] = $line_arr->first_recharge_gem->recharge_info->gemaward;
			$i++;
		}

//		$buchang_list[56]['_id'] = '16884';	
//		$buchang_list[56]['addgem'] = 100;	
//		$buchang_list[56]['gemaward'] = 0;	

		//补偿内容
		$rank_awards = array( 
			array('tag'=>'601001', 'num'=>2),//叫花鸡
			array('tag'=>'601002', 'num'=>2),//补元丹
			array('tag'=>'601019', 'num'=>50),//培养丹
			array('tag'=>'money',  'num'=>100000),//银两
		);
		
		//开始登录时间限制
		$start_time = strtotime("2013-03-23 00:00:00");
		//mktime(12,0,0,3,22,2013);
		
		//截止登录时间限制
		//$end_time = strtotime("2013-03-25 23:59:00");
		
		$content = "充值系统故障导致充值到账延迟，由此给您带来的不便十分抱歉，特此补偿：叫花鸡:2、补元丹:2、培养丹:50、银两:100000";
		
		//分区
		//$section_list = (array)$this->get_param('sec');
		$section_list = array("s12");
		if(empty($section_list)){
			$section_list = array_keys(getApp()->getSectionConfig());
		}
		$now = getApp()->now;
		//补偿日期
        $today   = $this->get_param('date');
		
		if(empty($today)){
			$today = date('md', $now);
		}
		
		//平台
		$platform = $this->get_param('platform');
		
		if(empty($section_list)){
			throw new Exception('section error');
			return;
		}
		
		if(P_PLATFORM !== $platform && P_PLATFORM !== 'dev'){
			echo "非$platform平台";
			return;
		}
		
		$desc_str = model_Cdkey::descriptItems($rank_awards);
		$maxuid = model_LoginUser::maxuid();

		$start = 1;
		$end = $maxuid;

		$rank_msg = array(
			'type'=>'system',
			'time'=>$now,
			'status'=>'award',
			'content'=>$content,
		);
		foreach($buchang_list as $value){
			$uid = $value['_id'];
			$gem_add = $value['addgem'];
			$gem_award = $value['gemaward'];
			$login_model = new model_LoginUser($uid);
			$player = new model_Player($uid,$section_list[0]);
			$palyer_result = $player->getFields(array("gem"));
			$pre_gem = $palyer_result['gem'];
			$payment_info = array();
			//$player->rechargeGem($gem_add, $gem_award, $payment_info);
			//echo $gem_award.'-----'.$gem_add."*****\n";
			$player->rewardGem(intval($gem_award) + intval($gem_add), '首次充值奖励翻倍');
			$player->commit();	
			$player = new model_Player($uid,$section_list[0]);
			$after_gem = $player->objectGet('base','gem');
			$login_model->get(array('secs' => 1,'_ct'=>1));
			$d = $login_model->doc();
			if(empty($d['secs'])){
				continue;
			}
			
			foreach ($d['secs'] as $section_id => $timestamp) {
				if (!is_numeric($timestamp)) {
					continue;
				}
				
				if(!in_array($section_id, $section_list)){
					continue ;
				}

				$d_day = date('md', $timestamp);
				
				/*
				if($timestamp < $start_time){
					continue;
				}*/
				
				$rank_msg['key'] = uniqid();
				//$cdkey = model_Cdkey::gen($rank_awards, $desc_str);
				//$rank_msg['cdkey'] = $cdkey;
				//model_Chat::sendMsg($rank_msg, $uid, 'origin', $section_id);
				echo "uid = [$uid]; section = [$section_id];补偿元宝数：$gem_add, 补偿前元宝：$pre_gem,补偿后元宝数：".$after_gem."， 登陆时间 = [$d_day];\n";
			}
		}
	}
	
}
